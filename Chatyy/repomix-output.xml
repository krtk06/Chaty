This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/App.jsx
src/assets/assets.js
src/assets/bin_icon.svg
src/assets/Chatylogo-dark-1.svg
src/assets/Chatylogo-light-1.svg
src/assets/close_icon.svg
src/assets/diamond_icon.svg
src/assets/favicon.svg
src/assets/gallery_icon.svg
src/assets/into_icon.svg
src/assets/logo_full_dark.svg
src/assets/logo_full.svg
src/assets/logo.svg
src/assets/logout_icon.svg
src/assets/menu_icon.svg
src/assets/prism.css
src/assets/react.svg
src/assets/search_icon.svg
src/assets/send_icon.svg
src/assets/stop_icon.svg
src/assets/theme_icon.svg
src/assets/user_icon.svg
src/components/ChatBox.jsx
src/components/Message.jsx
src/components/Sidebar.jsx
src/context/AppContext.jsx
src/icons/AiIcon.jsx
src/icons/Credits.jsx
src/icons/Delete.jsx
src/icons/Images.jsx
src/icons/LogoIcon.jsx
src/icons/SendIcon.jsx
src/icons/User.jsx
src/index.css
src/main.jsx
src/pages/Community.jsx
src/pages/Credits.jsx
src/pages/Loading.jsx
src/pages/Login.jsx
vercel.json
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

.env
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chaty</title>
    <link href="./src/index.css" rel="stylesheet">
  </head>
  <body>
    <div id="root" class=""></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "chatyy",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.1.12",
    "axios": "^1.12.1",
    "moment": "^2.30.1",
    "motion": "^12.23.12",
    "prismjs": "^1.30.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-hot-toast": "^2.6.0",
    "react-markdown": "^10.1.0",
    "react-router-dom": "^7.8.2",
    "tailwindcss": "^4.1.12"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "vite": "^7.1.2"
  }
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="src/App.jsx">
import React, { useState } from 'react'
import Sidebar from './components/Sidebar'
import { Routes, Route, useLocation } from 'react-router-dom'
import ChatBox from './components/ChatBox'
import Community from './pages/Community'
import Credits from './pages/Credits'
import Login from './pages/Login'
import { assets } from './assets/assets'
import './assets/prism.css'
import Loading from './pages/Loading'
import { useAppContext } from './context/AppContext'
import { Toaster } from 'react-hot-toast'



export default function App() {

  const { user, loadingUser } = useAppContext()

  const { pathname } = useLocation()

  if (pathname === '/loading' || loadingUser) return <Loading />
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  return (
    <>
    <Toaster/>
      {!isMenuOpen && <img src={assets.menu_icon} className='absolute top-3 left-3 w-8 h-8 cursor-pointer md:hidden dark:invert'
        onClick={() => setIsMenuOpen(true)} />}

      {user ? (
        <div className='dark:bg-gradient-to-b from-[#141414] to-[#000000] dark:text-white'>
          <div className='flex h-screen w-screen'>
            <Sidebar isMenuOpen={isMenuOpen} setIsMenuOpen={setIsMenuOpen} />
            <Routes>
              <Route path='/' element={<ChatBox />} />
              <Route path='/community' element={<Community />} />
              <Route path='/credits' element={<Credits />} />
              <Route path='/login' element={<Login />} />
            </Routes>
          </div>
        </div>
      ) : (
        <div className='bg-gradient-to-b from-[#212121] to-[#141414] flex items-center justify-center h-screen w-screen'>
          <Login />
        </div>
      )}

    </>
  )
}
</file>

<file path="src/assets/assets.js">
import logo from "./logo.svg";
import logo_full from "./logo_full.svg";
import logo_full_dark from "./logo_full_dark.svg";
import search_icon from "./search_icon.svg";
import user_icon from "./user_icon.svg";
import theme_icon from "./theme_icon.svg";
import send_icon from "./send_icon.svg";
import stop_icon from "./stop_icon.svg";
import mountain_img from "./mountain_img.jpg";
import menu_icon from "./menu_icon.svg";
import close_icon from "./close_icon.svg";
import bin_icon from "./bin_icon.svg";
import logout_icon from "./logout_icon.svg";
import diamond_icon from "./diamond_icon.svg";
import gallery_icon from "./gallery_icon.svg";
import into_icon from './into_icon.svg'
import logo_light from './Chatylogo-dark.png'
import logo_dark from './Chatylogo-light.png'
import my_logo1 from './Chatylogo-light-removebg.png'
import my_logo2 from './Chatylogo-dark-removebg.png'

import ai_image1 from "./ai_image1.jpg";
import ai_image2 from "./ai_image2.jpg";
import ai_image3 from "./ai_image3.jpg";
import ai_image4 from "./ai_image4.jpg";
import ai_image5 from "./ai_image5.jpg";
import ai_image6 from "./ai_image6.jpg";
import ai_image7 from "./ai_image7.jpg";
import ai_image8 from "./ai_image8.jpg";
import ai_image9 from "./ai_image9.jpg";
import ai_image10 from "./ai_image10.jpg";
import ai_image11 from "./ai_image11.jpg";
import ai_image12 from "./ai_image12.jpg";

export const assets = {
    logo,
    logo_full,
    search_icon,
    user_icon,
    theme_icon,
    send_icon,
    stop_icon,
    mountain_img,
    menu_icon,
    close_icon,
    bin_icon,
    logout_icon,
    logo_full_dark,
    diamond_icon,
    gallery_icon,
    into_icon,
    logo_light,
    logo_dark,
    my_logo1,
    my_logo2
};

export const dummyUserData = {
    "_id": "689c6deed410acddc0d95a0e",
    "name": "poppy",
    "email": "admin@example.com",
    "password": "$2b$10$VESVdPDjL5LF.KCU6jKyqeXNSLASAAfpR2kkIJExtMO.PJvZJAudy",
    "credits": 200,
}

// copy for server controllers
export const dummyPlans = [
    {
        _id: "basic",
        name: "Basic",
        price: 10,
        credits: 100,
        features: ['100 text generations', '50 image generations', 'Standard support', 'Access to basic models']
    },
    {
        _id: "pro",
        name: "Pro",
        price: 20,
        credits: 500,
        features: ['500 text generations', '200 image generations', 'Priority support', 'Access to pro models', 'Faster response time']
    },
    {
        _id: "premium",
        name: "Premium",
        price: 30,
        credits: 1000,
        features: ['1000 text generations', '500 image generations', '24/7 VIP support', 'Access to premium models', 'Dedicated account manager']
    }
];


export const dummyChats = [
    {
        "_id": "689de4bbaa932dc3a8ef6cd7",
        "userId": "689c6deed410acddc0d95a0e",
        "userName": "GreatStack",
        "name": "New Chat",
        "messages": [
            {
                "isImage": false,
                "isPublished": false,
                "role": "user",
                "content": "a boy running on water",
                "timestamp": 1755178179612,
            },
            {
                "isImage": true,
                "isPublished": true,
                "role": "assistant",
                "content": ai_image11,
                "timestamp": 1755178194747,
            }
        ],
        "createdAt": "2025-08-14T13:29:31.398Z",
        "updatedAt": "2025-08-14T13:29:54.753Z",
    },
    {
        "_id": "689ccb9016a922dd57a23fce",
        "userId": "689c6deed410acddc0d95a0e",
        "name": "New Chat",
        "messages": [
            {
                "isImage": false,
                "isPublished": false,
                "role": "user",
                "content": "hello ",
                "timestamp": 1755106415912,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "assistant",
                "content": "Hello! 😊 How can I assist you today?",
                "timestamp": 1755106420723,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "user",
                "content": "Generate a image of boy talking with others",
                "timestamp": 1755107475040,
            },
            {
                "isImage": true,
                "isPublished": true,
                "role": "assistant",
                "content": ai_image1,
                "timestamp": 1755107486680,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "user",
                "content": "i have to create a realistic image of jungle with wild animals so create a prompt for it",
                "timestamp": 1755158982894,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "assistant",
                "content": "Here's a detailed and structured prompt to generate a highly realistic jungle scene with wild animals:  \n\n---  \n\n**Prompt:**  \n*\"Ultra-realistic, hyper-detailed photorealistic jungle landscape teeming with wildlife. The setting is a dense, vibrant rainforest bathed in dappled sunlight filtering through the thick canopy. Towering ancient trees with intricate root systems, lush green ferns, vines, and exotic flowers create a rich, immersive environment. A clear, sparkling stream winds through the scene, reflecting the lush surroundings.  \n\nWildlife in their natural habitat:  \n- A majestic Bengal tiger crouches on a moss-covered rock near the water, muscles tensed as it watches for prey.  \n- A family of elephants moves gently through the undergrowth, led by a large matriarch with a protective stance.  \n- Colorful macaws and parrots perch on high branches, their bright feathers contrasting with the greenery.  \n- A stealthy jaguar lurks in the shadows, its golden eyes piercing.  \n- A troupe of playful monkeys swings from vines, their expressions lively and dynamic.  \n- A slow-moving sloth clings to a tree branch, blending into the foliage.  \n\nAtmospheric elements:  \n- Soft mist lingers near the forest floor, adding depth.  \n- Dragonflies and butterflies hover near the water's edge.  \n- Distant bird calls and rustling leaves create an immersive ambiance.  \n\nCinematic composition with balanced lighting—sunbeams piercing through the canopy in a god-ray effect. Depth of field focuses sharply on the tiger while softly blurring the background for realism. Shot with a high-resolution DSLR style for maximum detail, 8K quality. Ultra HD, National Geographic-style wildlife photography.\"*  \n\n---  \n\n### **Tips for Adjusting the Prompt:**  \n- **For a more serene scene:** Remove predators (like the jaguar) and focus on grazing animals like deer or tapirs.  \n- **For a darker, mysterious tone:** Add rain, stormy lighting, or a twilight setting.  \n- **For more biodiversity:** Include reptiles (snakes, frogs) or insects (beetles, spiders).  \n\nWould you like any modifications for a specific mood or artistic style (e.g., painterly, cinematic, or fantasy-inspired)?",
                "timestamp": 1755158995829,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "user",
                "content": "Ultra-realistic, hyper-detailed photorealistic jungle landscape teeming with wildlife. The setting is a dense, vibrant rainforest bathed in dappled sunlight filtering through the thick canopy. Towering ancient trees with intricate root systems, lush green ferns, vines, and exotic flowers create a rich, immersive environment. A clear, sparkling stream winds through the scene, reflecting the lush surroundings.  Wildlife in their natural habitat:  A majestic Bengal tiger crouches on a moss-covered rock near the water, muscles tensed as it watches for prey. A family of elephants moves gently through the undergrowth, led by a large matriarch with a protective stance. Colorful macaws and parrots perch on high branches, their bright feathers contrasting with the greenery. A stealthy jaguar lurks in the shadows, its golden eyes piercing. A troupe of playful monkeys swings from vines, their expressions lively and dynamic. A slow-moving sloth clings to a tree branch, blending into the foliage. Atmospheric elements:  Soft mist lingers near the forest floor, adding depth. Dragonflies and butterflies hover near the water's edge. Distant bird calls and rustling leaves create an immersive ambiance. Cinematic composition with balanced lighting—sunbeams piercing through the canopy in a god-ray effect. Depth of field focuses sharply on the tiger while softly blurring the background for realism. Shot with a high-resolution DSLR style for maximum detail, 8K quality. Ultra HD, National Geographic-style wildlife photography.",
                "timestamp": 1755159013677,
            },
            {
                "isImage": true,
                "isPublished": true,
                "role": "assistant",
                "content": ai_image2,
                "timestamp": 1755159034238,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "user",
                "content": "top web technologies to learn in 2025",
                "timestamp": 1755159074583,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "assistant",
                "content": "Here are the top web technologies to learn in 2025 to stay competitive in the industry:\n\n### **Frontend Development**  \n1. **React.js** – Still the dominant frontend library with increasing adoption of **React Server Components (RSC)** and **Next.js**.  \n2. **Next.js (v14+)** – Meta-framework for React enabling **server-side rendering (SSR)**, static site generation (SSG), and edge computing.  \n3. **Vue.js (v3.x + Vite)** – Growing ecosystem with better DX and performance.  \n4. **Svelte & SvelteKit** – Rising in popularity due to its compile-time reactivity and lightweight output.  \n5. **WebAssembly (WASM)** – Enables near-native performance for web apps (used in Figma, Photoshop, etc.).  \n\n### **Backend Development**  \n6. **Node.js (v20+)** – Still leading in JavaScript-based backend development.  \n7. **Deno & Bun** – Faster alternatives to Node.js with modern APIs (Bun is gaining traction for speed).  \n8. **Python (FastAPI, Django, Flask)** – Python remains strong for backend and AI-powered apps.  \n9. **Rust (Actix, Axum, Rocket)** – High-performance backend development with safety guarantees.  \n10. **Go (Golang)** – Valued for scalable backend systems (used by Uber, Twitch, Docker).  \n\n### **Full-Stack & Cloud-Native**  \n11. **GraphQL (Apollo, Relay)** – Alternative to REST for efficient API queries.  \n12. **Serverless (AWS Lambda, Vercel, Cloudflare Workers)** – Shift toward edge computing and serverless architectures.  \n13. **Web3 & Blockchain (Ethereum, Solana, Web3.js, Ethers.js)** – Emerging in decentralized apps (dApps).  \n14. **Microservices & Kubernetes** – Essential for scalable cloud-native apps.  \n\n### **CSS & Styling**  \n15. **Tailwind CSS** – Utility-first CSS framework dominating modern UI development.  \n16. **CSS Modules & CSS-in-JS (Emotion, Styled Components)** – Scoped styling for component-based apps.  \n17. **PostCSS & Modern CSS (Flexbox, Grid, Container Queries)** – Advanced styling techniques.  \n\n### **Database & State Management**  \n18. **PostgreSQL, MongoDB, & Edge Databases (PlanetScale, Neon, Supabase)** – SQL + NoSQL trends.  \n19. **Prisma, DrizzleORM** – Modern ORMs for TypeScript/Node.js.  \n20. **GraphQL Client State (RTK Query, Apollo Client, URQL)** – Managing data efficiently.  \n\n### **Emerging & Future-Proof Tech**  \n21. **AI & LLM Integration (OpenAI, LangChain)** – AI-powered web apps (ChatGPT plugins, copilots).  \n22. **Progressive Web Apps (PWAs + Web APIs)** – Offline-first, installable web apps.  \n23. **WebRTC & Real-Time (Socket.io, Liveblocks, PartyKit)** – Real-time collaboration features.  \n24. **3D & WebGL (Three.js, Babylon.js, React Three Fiber)** – Interactive 3D web experiences.  \n25. **Motion UI & Animation (GSAP, Framer Motion)** – Advanced web animations.  \n\n### **Must-Have Tools & DevOps**  \n- **Git, CI/CD (GitHub Actions, Vercel, Netlify)**  \n- **Docker & Kubernetes** (for containerization)  \n- **Testing (Vitest, Playwright, Cypress, Jest)**  \n\n### **Why Learn These in 2025?**  \n- **Speed & Efficiency**: Tools like **Bun, Rust, and WASM** optimize performance.  \n- **AI Integration**: AI is being embedded into web dev at a rapid pace.  \n- **Edge Computing & Serverless**: Cloud providers are pushing serverless/edge deployments.  \n- **Full-Stack Dominance**: Frameworks like **Next.js, SvelteKit, and Remix** blur frontend/backend lines.  \n\nFocus on **React + Next.js, Rust/Go for backend, TypeScript, and AI integrations** for maximum opportunities in 2025. 🚀  \n\nWould you like a tailored roadmap based on your goals?",
                "timestamp": 1755159100513,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "user",
                "content": "write a code for basic express app ",
                "timestamp": 1755159129597,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "assistant",
                "content": "# Basic Express.js Application\n\nHere's a simple Express.js application setup with some basic routes:\n\n```javascript\n// Import required modules\nconst express = require('express');\nconst path = require('path');\n\n// Create an Express application\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(express.json()); // For parsing application/json\napp.use(express.urlencoded({ extended: true })); // For parsing application/x-www-form-urlencoded\n\n// Serve static files from the 'public' directory\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Basic routes\napp.get('/', (req, res) => {\n  res.send('Welcome to the Express App!');\n});\n\napp.get('/about', (req, res) => {\n  res.send('About Page');\n});\n\n// Example route with parameters\napp.get('/user/:id', (req, res) => {\n  res.send(`User ID: ${req.params.id}`);\n});\n\n// Example POST route\napp.post('/api/data', (req, res) => {\n  console.log(req.body);\n  res.json({ message: 'Data received', data: req.body });\n});\n\n// 404 Error handler\napp.use((req, res) => {\n  res.status(404).send('404 - Not Found');\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n});\n\n// Start the server\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});\n```\n\n## Setup Instructions\n\n1. Make sure you have Node.js installed\n2. Create a new directory for your project\n3. Initialize a new Node.js project:\n   ```bash\n   npm init -y\n   ```\n4. Install Express:\n   ```bash\n   npm install express\n   ```\n5. Save the code above in a file named `app.js`\n6. Create a `public` directory if you want to serve static files\n7. Start the server:\n   ```bash\n   node app.js\n   ```\n\n## Features\n- Basic routes ('/', '/about', '/user/:id')\n- POST route for handling form data\n- Static file serving\n- Error handling\n- JSON body parsing\n\nYou can expand this basic setup by adding more routes, connecting to a database, or adding middleware as needed.",
                "timestamp": 1755159145294,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "user",
                "content": "generate a image of gaming pc setup in a room in realistic style",
                "timestamp": 1755159264109,
            },
            {
                "isImage": true,
                "isPublished": true,
                "role": "assistant",
                "content": ai_image3,
                "timestamp": 1755159273878,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "user",
                "content": "what are web3",
                "timestamp": 1755159666525,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "assistant",
                "content": "**Web3** (or **Web 3.0**) refers to the next evolution of the internet, centered on **decentralization, blockchain technology, and user ownership of data**. It aims to shift control from large tech companies to users by leveraging cryptographic protocols and peer-to-peer networks.\n\n### **Key Features of Web3:**\n1. **Decentralization**  \n   - No single entity controls the internet; instead, it operates on distributed networks (like blockchains or peer-to-peer systems).\n   - Contrasts with Web2 (the current internet), dominated by centralized platforms like Google, Facebook, and Amazon.\n\n2. **Blockchain & Cryptocurrency**  \n   - Uses blockchain (e.g., Ethereum, Solana) for trustless transactions and smart contracts.\n   - Cryptocurrencies (e.g., Bitcoin, ETH) enable value transfer without intermediaries.\n\n3. **User Ownership & Digital Identity**  \n   - Users own their data (via **decentralized identity** solutions) and monetize it directly.\n   - NFTs (Non-Fungible Tokens) allow ownership of digital assets (art, music, virtual land).\n\n4. **Interoperability & Openness**  \n   - Applications (dApps) can interact seamlessly across different blockchains.\n   - Open-source protocols reduce reliance on proprietary platforms.\n\n5. **Tokenized Incentives**  \n   - Users and developers are rewarded with tokens (e.g., governance tokens, staking rewards).\n\n### **Examples of Web3 Technologies:**\n- **DeFi (Decentralized Finance)** – Peer-to-peer financial services (e.g., Uniswap, Aave).  \n- **NFTs & Digital Ownership** – CryptoPunks, OpenSea, and blockchain gaming.  \n- **DAOs (Decentralized Autonomous Organizations)** – Community-governed entities (e.g., MakerDAO).  \n- **Decentralized Storage** – IPFS, Filecoin (vs. centralized cloud storage like AWS).  \n\n### **Web3 vs. Web2 vs. Web1**\n- **Web1 (1990s-2000s):** Read-only static websites (e.g., early HTML pages).  \n- **Web2 (2000s-present):** Interactive, social media, cloud computing (Facebook, YouTube).  \n- **Web3 (emerging):** Decentralized, user-owned, token-based economies.  \n\n### **Challenges of Web3**\n- **Scalability:** Blockchains struggle with speed and cost (e.g., Ethereum gas fees).  \n- **Regulation:** Governments are still figuring out crypto laws.  \n- **User Experience:** Complex for non-technical users.  \n\nWould you like a deeper dive into any specific aspect? 🚀",
                "timestamp": 1755159683847,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "user",
                "content": "Generate a image nature with trees  in realistic style",
                "timestamp": 1755160243315,
            },
            {
                "isImage": true,
                "isPublished": true,
                "role": "assistant",
                "content": ai_image4,
                "timestamp": 1755160254161,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "user",
                "content": "a gaming pc setup ",
                "timestamp": 1755163772103,
            },
            {
                "isImage": true,
                "isPublished": true,
                "role": "assistant",
                "content": ai_image6,
                "timestamp": 1755163783470,
            },
            {
                "isImage": false,
                "isPublished": false,
                "role": "user",
                "content": "a streaming setup with mic and accessory's ",
                "timestamp": 1755163990514,
            },
            {
                "isImage": true,
                "isPublished": true,
                "role": "assistant",
                "content": ai_image7,
                "timestamp": 1755164001928,
            }
            
        ],
        "createdAt": "2025-08-13T17:29:52.421Z",
        "updatedAt": "2025-08-14T09:39:19.046Z",
        "userName": "GreatStack"
    },
    {
        "_id": Date.now(),
        "userId": "gs123456789",
        "name": "New Chat",
        "userName": "GreatStack",
        "messages": [],
        "createdAt": "2025-08-13T17:29:52.421Z",
        "updatedAt": "2025-08-14T09:39:19.046Z",
    }
]

export const dummyPublishedImages = [
    {
        "imageUrl": ai_image11,
        "userName": "GreatStack"
    },
    {
        "imageUrl": ai_image10,
        "userName": "GreatStack"
    },
    {
        "imageUrl": ai_image9,
        "userName": "GreatStack"
    },
    {
        "imageUrl": ai_image8,
        "userName": "GreatStack"
    },
    {
        "imageUrl": ai_image7,
        "userName": "GreatStack"
    },
    {
        "imageUrl": ai_image6,
        "userName": "GreatStack"
    },
    {
        "imageUrl": ai_image5,
        "userName": "GreatStack"
    },
    {
        "imageUrl": ai_image4,
        "userName": "GreatStack"
    },
    {
        "imageUrl": ai_image3,
        "userName": "GreatStack"
    },
    {
        "imageUrl": ai_image2,
        "userName": "GreatStack"
    },
    {
        "imageUrl": ai_image1,
        "userName": "GreatStack"
    }
]

export default assets
</file>

<file path="src/assets/bin_icon.svg">
<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M1.5 3.75C1.08579 3.75 0.75 4.08579 0.75 4.5C0.75 4.91421 1.08579 5.25 1.5 5.25V3.75ZM22.5 5.25C22.9142 5.25 23.25 4.91421 23.25 4.5C23.25 4.08579 22.9142 3.75 22.5 3.75V5.25ZM1.5 5.25H22.5V3.75H1.5V5.25Z" fill="#ffffff"></path> <path d="M9.75 1.5V0.75V1.5ZM8.25 3H7.5H8.25ZM7.5 4.5C7.5 4.91421 7.83579 5.25 8.25 5.25C8.66421 5.25 9 4.91421 9 4.5H7.5ZM15 4.5C15 4.91421 15.3358 5.25 15.75 5.25C16.1642 5.25 16.5 4.91421 16.5 4.5H15ZM15.75 3H16.5H15.75ZM14.25 0.75H9.75V2.25H14.25V0.75ZM9.75 0.75C9.15326 0.75 8.58097 0.987053 8.15901 1.40901L9.21967 2.46967C9.36032 2.32902 9.55109 2.25 9.75 2.25V0.75ZM8.15901 1.40901C7.73705 1.83097 7.5 2.40326 7.5 3H9C9 2.80109 9.07902 2.61032 9.21967 2.46967L8.15901 1.40901ZM7.5 3V4.5H9V3H7.5ZM16.5 4.5V3H15V4.5H16.5ZM16.5 3C16.5 2.40326 16.2629 1.83097 15.841 1.40901L14.7803 2.46967C14.921 2.61032 15 2.80109 15 3H16.5ZM15.841 1.40901C15.419 0.987053 14.8467 0.75 14.25 0.75V2.25C14.4489 2.25 14.6397 2.32902 14.7803 2.46967L15.841 1.40901Z" fill="#ffffff"></path> <path d="M9 17.25C9 17.6642 9.33579 18 9.75 18C10.1642 18 10.5 17.6642 10.5 17.25H9ZM10.5 9.75C10.5 9.33579 10.1642 9 9.75 9C9.33579 9 9 9.33579 9 9.75H10.5ZM10.5 17.25V9.75H9V17.25H10.5Z" fill="#ffffff"></path> <path d="M13.5 17.25C13.5 17.6642 13.8358 18 14.25 18C14.6642 18 15 17.6642 15 17.25H13.5ZM15 9.75C15 9.33579 14.6642 9 14.25 9C13.8358 9 13.5 9.33579 13.5 9.75H15ZM15 17.25V9.75H13.5V17.25H15Z" fill="#ffffff"></path> <path d="M18.865 21.124L18.1176 21.0617L18.1176 21.062L18.865 21.124ZM17.37 22.5L17.3701 21.75H17.37V22.5ZM6.631 22.5V21.75H6.63093L6.631 22.5ZM5.136 21.124L5.88343 21.062L5.88341 21.0617L5.136 21.124ZM4.49741 4.43769C4.46299 4.0249 4.10047 3.71818 3.68769 3.75259C3.2749 3.78701 2.96818 4.14953 3.00259 4.56231L4.49741 4.43769ZM20.9974 4.56227C21.0318 4.14949 20.7251 3.78698 20.3123 3.75259C19.8995 3.7182 19.537 4.02495 19.5026 4.43773L20.9974 4.56227ZM18.1176 21.062C18.102 21.2495 18.0165 21.4244 17.878 21.5518L18.8939 22.6555C19.3093 22.2732 19.5658 21.7486 19.6124 21.186L18.1176 21.062ZM17.878 21.5518C17.7396 21.6793 17.5583 21.75 17.3701 21.75L17.3699 23.25C17.9345 23.25 18.4785 23.0379 18.8939 22.6555L17.878 21.5518ZM17.37 21.75H6.631V23.25H17.37V21.75ZM6.63093 21.75C6.44274 21.75 6.26142 21.6793 6.12295 21.5518L5.10713 22.6555C5.52253 23.0379 6.06649 23.25 6.63107 23.25L6.63093 21.75ZM6.12295 21.5518C5.98449 21.4244 5.89899 21.2495 5.88343 21.062L4.38857 21.186C4.43524 21.7486 4.69172 22.2732 5.10713 22.6555L6.12295 21.5518ZM5.88341 21.0617L4.49741 4.43769L3.00259 4.56231L4.38859 21.1863L5.88341 21.0617ZM19.5026 4.43773L18.1176 21.0617L19.6124 21.1863L20.9974 4.56227L19.5026 4.43773Z" fill="#ffffff"></path> </g></svg>
</file>

<file path="src/assets/Chatylogo-dark-1.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="64px" height="43px" viewBox="0 0 63 43" version="1.1">
<g id="surface1">
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;" d="M 62.929688 4.078125 C 62.929688 17.078125 62.929688 30.078125 62.929688 43.09375 C 42.945312 43.09375 22.960938 43.09375 2.945312 43.074219 C 2.460938 42.226562 1.746094 41.886719 0.839844 41.894531 C 0.597656 41.894531 0.347656 41.847656 0.253906 42.167969 C 0.253906 28.148438 0.253906 14.128906 0.253906 0.09375 C 17.777344 0.09375 35.300781 0.09375 52.847656 0.105469 C 52.730469 0.21875 52.773438 0.296875 52.867188 0.417969 C 53.609375 1.414062 54.472656 2.222656 55.738281 2.460938 C 55.871094 2.484375 55.996094 2.550781 56.128906 2.589844 C 57.304688 2.917969 58.429688 3.503906 59.707031 3.335938 C 59.820312 3.320312 59.957031 3.351562 60.0625 3.40625 C 60.910156 3.847656 61.773438 4.191406 62.753906 4.039062 C 62.808594 4.03125 62.871094 4.0625 62.929688 4.078125 M 40.835938 14.308594 C 40.15625 14.308594 39.472656 14.308594 38.789062 14.308594 C 37.816406 14.308594 37.816406 14.308594 37.816406 15.277344 C 37.816406 16.203125 37.820312 17.128906 37.8125 18.054688 C 37.8125 18.210938 37.875 18.390625 37.734375 18.53125 C 37.546875 18.46875 37.546875 18.289062 37.496094 18.160156 C 37.058594 17.074219 36.621094 15.988281 36.207031 14.894531 C 36.050781 14.476562 35.824219 14.292969 35.367188 14.300781 C 33.816406 14.324219 32.269531 14.320312 30.722656 14.304688 C 30.289062 14.296875 30.050781 14.476562 29.898438 14.871094 C 28.339844 18.921875 26.769531 22.96875 25.210938 27.015625 C 25.015625 27.519531 25.0625 27.582031 25.582031 27.585938 C 28.726562 27.585938 31.867188 27.585938 35.007812 27.585938 C 35.527344 27.585938 35.5625 27.535156 35.382812 27.015625 C 35.007812 25.941406 34.597656 24.878906 34.246094 23.796875 C 34.105469 23.351562 33.878906 23.179688 33.425781 23.203125 C 32.855469 23.234375 32.285156 23.207031 31.613281 23.207031 C 32.050781 21.882812 32.476562 20.671875 32.992188 19.457031 C 33.257812 19.640625 33.277344 19.871094 33.347656 20.066406 C 34.195312 22.445312 35.039062 24.820312 35.878906 27.203125 C 35.96875 27.453125 36.09375 27.585938 36.371094 27.585938 C 39.296875 27.582031 42.226562 27.582031 45.15625 27.585938 C 45.464844 27.589844 45.59375 27.453125 45.589844 27.140625 C 45.582031 26.601562 45.570312 26.058594 45.59375 25.519531 C 45.613281 25.085938 45.5 24.714844 45.273438 24.34375 C 44.410156 22.929688 43.5625 21.5 42.714844 20.074219 C 42.625 19.921875 42.488281 19.78125 42.542969 19.558594 C 42.710938 19.429688 42.910156 19.457031 43.105469 19.457031 C 43.773438 19.453125 44.441406 19.453125 45.109375 19.449219 C 45.273438 19.449219 45.476562 19.476562 45.550781 19.289062 C 45.664062 19.003906 45.886719 19.011719 46.113281 19.007812 C 46.734375 19 47.359375 18.988281 47.980469 19 C 48.367188 19.007812 48.523438 18.847656 48.515625 18.449219 C 48.5 17.320312 48.511719 16.195312 48.511719 15.066406 C 48.511719 14.355469 48.464844 14.308594 47.757812 14.308594 C 45.480469 14.308594 43.207031 14.308594 40.835938 14.308594 M 9.015625 9.894531 C 5.253906 11.984375 3.371094 16.542969 4.515625 20.773438 C 5.671875 25.03125 9.59375 27.964844 13.984375 27.851562 C 17.058594 27.773438 21.265625 25.179688 21.707031 23.027344 C 20.738281 23.027344 19.785156 23.007812 18.832031 23.039062 C 18.421875 23.050781 18.320312 22.910156 18.332031 22.507812 C 18.355469 21.425781 18.34375 20.347656 18.335938 19.265625 C 18.335938 18.613281 18.265625 18.542969 17.636719 18.535156 C 17.320312 18.53125 17 18.542969 16.683594 18.519531 C 16.363281 18.496094 16.199219 18.585938 16.105469 18.9375 C 15.777344 20.140625 14.578125 20.917969 13.335938 20.78125 C 12.152344 20.652344 11.132812 19.648438 11.0625 18.542969 C 10.972656 17.179688 11.710938 16.035156 12.871094 15.734375 C 14.171875 15.398438 15.542969 15.933594 15.957031 17.121094 C 16.230469 17.898438 16.652344 18.054688 17.332031 17.957031 C 17.394531 17.949219 17.457031 17.957031 17.515625 17.953125 C 18.289062 17.949219 18.339844 17.894531 18.335938 17.117188 C 18.324219 14.910156 18.300781 12.699219 18.300781 10.492188 C 18.300781 10.066406 18.167969 9.808594 17.777344 9.628906 C 14.835938 8.25 11.9375 8.324219 9.015625 9.894531 M 22.34375 22.21875 C 22.679688 22.21875 23.011719 22.199219 23.34375 22.222656 C 23.785156 22.257812 23.933594 22.070312 23.925781 21.628906 C 23.902344 20.550781 23.914062 19.46875 23.917969 18.386719 C 23.917969 17.757812 23.921875 17.757812 24.558594 17.757812 C 25.105469 17.757812 25.652344 17.757812 26.199219 17.757812 C 26.789062 17.761719 26.792969 17.761719 26.792969 18.382812 C 26.796875 18.960938 26.792969 19.539062 26.792969 20.167969 C 27.042969 20.027344 27.066406 19.847656 27.125 19.699219 C 27.773438 18.035156 28.496094 16.398438 29.027344 14.695312 C 29.355469 13.644531 29.863281 13.25 30.910156 13.398438 C 31.429688 13.472656 31.554688 13.292969 31.558594 12.757812 C 31.566406 11.695312 31.542969 10.628906 31.570312 9.5625 C 31.582031 9.113281 31.398438 8.941406 30.988281 8.941406 C 29.761719 8.945312 28.53125 8.949219 27.300781 8.941406 C 26.917969 8.941406 26.777344 9.101562 26.785156 9.503906 C 26.808594 10.632812 26.78125 11.757812 26.800781 12.886719 C 26.804688 13.269531 26.667969 13.402344 26.296875 13.386719 C 25.675781 13.367188 25.050781 13.363281 24.429688 13.390625 C 24.023438 13.410156 23.898438 13.242188 23.90625 12.847656 C 23.921875 11.769531 23.914062 10.6875 23.910156 9.605469 C 23.90625 9.058594 23.808594 8.929688 23.277344 8.945312 C 22.121094 8.984375 20.972656 8.976562 19.816406 8.949219 C 19.25 8.933594 19.148438 9.0625 19.148438 9.625 C 19.144531 13.640625 19.148438 17.65625 19.136719 21.667969 C 19.136719 22.101562 19.300781 22.234375 19.703125 22.222656 C 20.550781 22.203125 21.402344 22.21875 22.34375 22.21875 M 55.144531 27.53125 C 56.453125 25.34375 57.761719 23.15625 59.070312 20.96875 C 59.160156 20.816406 59.335938 20.660156 59.226562 20.472656 C 59.125 20.289062 58.902344 20.335938 58.726562 20.335938 C 57.253906 20.332031 55.78125 20.34375 54.308594 20.324219 C 53.941406 20.320312 53.722656 20.457031 53.550781 20.78125 C 53.121094 21.578125 52.691406 22.375 52.210938 23.144531 C 51.917969 23.613281 51.863281 24 52.1875 24.484375 C 52.398438 24.808594 52.695312 25.128906 52.683594 25.597656 C 52.382812 25.582031 52.328125 25.347656 52.226562 25.171875 C 51.378906 23.695312 50.527344 22.21875 49.6875 20.734375 C 49.523438 20.445312 49.324219 20.320312 48.992188 20.328125 C 48.234375 20.347656 47.476562 20.332031 46.714844 20.332031 C 45.957031 20.332031 45.199219 20.324219 44.441406 20.339844 C 44.023438 20.347656 43.925781 20.53125 44.117188 20.902344 C 44.191406 21.039062 44.273438 21.167969 44.351562 21.300781 C 45.878906 23.839844 47.402344 26.382812 48.933594 28.917969 C 49.125 29.234375 49.222656 29.546875 49.214844 29.917969 C 49.199219 30.984375 49.21875 32.046875 49.207031 33.113281 C 49.203125 33.460938 49.328125 33.621094 49.6875 33.617188 C 50.960938 33.605469 52.234375 33.605469 53.507812 33.617188 C 53.863281 33.621094 54 33.472656 53.992188 33.121094 C 53.980469 32.582031 53.988281 32.042969 53.988281 31.5 C 53.992188 29.375 53.992188 29.375 55.144531 27.53125 Z M 55.144531 27.53125 "/>
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;" d="M 40.8125 21.222656 C 40.8125 22.878906 40.8125 24.492188 40.8125 26.105469 C 40.757812 26.121094 40.699219 26.132812 40.644531 26.148438 C 39.722656 23.8125 38.800781 21.476562 37.871094 19.121094 C 38.222656 18.929688 38.53125 19.007812 38.824219 19 C 39.324219 18.988281 39.824219 19.003906 40.324219 19.003906 C 40.664062 19.003906 40.824219 19.15625 40.816406 19.511719 C 40.804688 20.066406 40.8125 20.621094 40.8125 21.222656 Z M 40.8125 21.222656 "/>
</g>
</svg>
</file>

<file path="src/assets/Chatylogo-light-1.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="59px" height="43px" viewBox="0 0 59 43" version="1.1">
<g id="surface1">
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(100%,97.647059%,97.647059%);fill-opacity:1;" d="M 32.453125 43.078125 C 21.636719 43.078125 10.855469 43.078125 0.078125 43.078125 C 0.078125 28.746094 0.078125 14.414062 0.078125 0.078125 C 19.746094 0.078125 39.410156 0.078125 59.078125 0.078125 C 59.078125 14.414062 59.078125 28.746094 59.078125 43.078125 C 50.21875 43.078125 41.355469 43.078125 32.453125 43.078125 M 47.660156 23.863281 C 47.105469 22.90625 46.546875 21.953125 46.003906 20.992188 C 45.886719 20.789062 45.769531 20.695312 45.519531 20.699219 C 44.074219 20.714844 42.632812 20.707031 41.1875 20.707031 C 41.09375 20.707031 40.996094 20.722656 40.871094 20.734375 C 40.929688 20.839844 40.964844 20.910156 41.007812 20.976562 C 42.453125 23.363281 43.902344 25.746094 45.335938 28.140625 C 45.464844 28.351562 45.539062 28.628906 45.546875 28.875 C 45.570312 29.839844 45.5625 30.804688 45.550781 31.769531 C 45.546875 32.046875 45.636719 32.128906 45.910156 32.125 C 47.117188 32.113281 48.324219 32.121094 49.53125 32.121094 C 49.605469 32.121094 49.679688 32.097656 49.773438 32.085938 C 49.773438 30.996094 49.761719 29.925781 49.78125 28.859375 C 49.785156 28.632812 49.84375 28.382812 49.957031 28.191406 C 51.367188 25.84375 52.792969 23.507812 54.210938 21.164062 C 54.296875 21.027344 54.375 20.886719 54.476562 20.707031 C 52.847656 20.707031 51.300781 20.699219 49.753906 20.714844 C 49.632812 20.714844 49.460938 20.824219 49.398438 20.929688 C 48.894531 21.78125 48.410156 22.636719 47.929688 23.5 C 47.871094 23.601562 47.882812 23.742188 47.78125 23.886719 C 47.75 23.894531 47.722656 23.898438 47.660156 23.863281 M 27.53125 26.898438 C 29.832031 26.898438 32.132812 26.898438 34.492188 26.898438 C 34.039062 25.644531 33.617188 24.457031 33.171875 23.277344 C 33.132812 23.183594 32.941406 23.09375 32.820312 23.089844 C 32.246094 23.070312 31.671875 23.082031 31.035156 23.082031 C 31.433594 22.011719 31.8125 20.992188 32.21875 19.898438 C 32.296875 20.066406 32.335938 20.132812 32.363281 20.207031 C 33.125 22.324219 33.890625 24.441406 34.636719 26.566406 C 34.730469 26.824219 34.835938 26.90625 35.105469 26.902344 C 37.519531 26.894531 39.933594 26.898438 42.347656 26.898438 C 42.460938 26.894531 42.570312 26.878906 42.695312 26.871094 C 42.695312 26.355469 42.726562 25.878906 42.6875 25.40625 C 42.660156 25.09375 42.589844 24.75 42.433594 24.484375 C 41.769531 23.332031 41.066406 22.203125 40.378906 21.0625 C 40.191406 20.753906 40.011719 20.4375 39.785156 20.054688 C 40.804688 20.054688 41.738281 20.054688 42.675781 20.054688 C 42.691406 19.875 42.703125 19.75 42.714844 19.582031 C 43.558594 19.582031 44.378906 19.582031 45.210938 19.582031 C 45.210938 18.199219 45.210938 16.859375 45.210938 15.511719 C 45.15625 15.5 45.117188 15.484375 45.082031 15.484375 C 42.128906 15.484375 39.175781 15.484375 36.222656 15.480469 C 35.976562 15.476562 35.90625 15.5625 35.910156 15.796875 C 35.921875 16.566406 35.914062 17.332031 35.914062 18.097656 C 35.542969 17.367188 35.238281 16.625 34.960938 15.875 C 34.859375 15.59375 34.726562 15.46875 34.398438 15.472656 C 32.941406 15.496094 31.484375 15.492188 30.027344 15.476562 C 29.738281 15.472656 29.625 15.578125 29.523438 15.835938 C 28.332031 18.914062 27.125 21.992188 25.925781 25.070312 C 25.691406 25.664062 25.46875 26.261719 25.226562 26.898438 C 26.007812 26.898438 26.730469 26.898438 27.53125 26.898438 M 10.027344 25.324219 C 14.554688 28.792969 20.3125 26.558594 22.097656 22.898438 C 21.117188 22.898438 20.152344 22.898438 19.148438 22.898438 C 19.148438 21.578125 19.148438 20.289062 19.148438 18.972656 C 18.546875 18.972656 17.984375 18.960938 17.421875 18.984375 C 17.332031 18.988281 17.199219 19.136719 17.171875 19.242188 C 16.792969 20.671875 15.25 21.351562 13.957031 20.648438 C 13.136719 20.207031 12.679688 19.238281 12.871094 18.34375 C 13.074219 17.402344 13.863281 16.695312 14.789062 16.625 C 15.859375 16.542969 16.769531 17.09375 17.101562 18.027344 C 17.167969 18.210938 17.214844 18.402344 17.273438 18.59375 C 17.898438 18.59375 18.507812 18.59375 19.128906 18.59375 C 19.140625 18.523438 19.15625 18.472656 19.15625 18.425781 C 19.160156 16.242188 19.164062 14.0625 19.148438 11.878906 C 19.148438 11.75 19.015625 11.570312 18.898438 11.507812 C 17.6875 10.851562 16.394531 10.539062 15.011719 10.542969 C 10.746094 10.554688 7.144531 13.851562 6.84375 18.132812 C 6.640625 21.046875 7.722656 23.445312 10.027344 25.324219 M 19.78125 11.476562 C 19.78125 15.078125 19.78125 18.679688 19.78125 22.285156 C 21.207031 22.285156 22.578125 22.285156 23.988281 22.285156 C 23.988281 21.015625 23.988281 19.765625 23.988281 18.511719 C 24.796875 18.511719 25.574219 18.511719 26.386719 18.511719 C 26.386719 19.71875 26.386719 20.890625 26.386719 22.171875 C 26.464844 22 26.5 21.933594 26.527344 21.863281 C 27.390625 19.640625 28.257812 17.417969 29.109375 15.191406 C 29.21875 14.910156 29.359375 14.796875 29.65625 14.820312 C 29.953125 14.847656 30.25 14.828125 30.546875 14.828125 C 30.546875 13.5 30.546875 12.214844 30.546875 10.921875 C 29.144531 10.921875 27.773438 10.921875 26.355469 10.921875 C 26.355469 12.1875 26.355469 13.421875 26.355469 14.65625 C 25.550781 14.65625 24.792969 14.65625 24 14.65625 C 24 14.511719 24 14.382812 24 14.253906 C 24 13.277344 23.988281 12.296875 24.003906 11.320312 C 24.011719 11 23.933594 10.882812 23.59375 10.886719 C 22.4375 10.910156 21.285156 10.894531 20.128906 10.898438 C 20.015625 10.898438 19.90625 10.914062 19.78125 10.925781 C 19.78125 11.109375 19.78125 11.253906 19.78125 11.476562 Z M 19.78125 11.476562 "/>
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(9.411765%,9.019608%,9.019608%);fill-opacity:1;" d="M 27.492188 26.898438 C 26.730469 26.898438 26.007812 26.898438 25.226562 26.898438 C 25.46875 26.261719 25.691406 25.664062 25.925781 25.070312 C 27.125 21.992188 28.332031 18.914062 29.523438 15.835938 C 29.625 15.578125 29.738281 15.472656 30.027344 15.476562 C 31.484375 15.492188 32.941406 15.496094 34.398438 15.472656 C 34.726562 15.46875 34.859375 15.59375 34.960938 15.875 C 35.238281 16.625 35.542969 17.367188 35.914062 18.097656 C 35.914062 17.332031 35.921875 16.566406 35.910156 15.796875 C 35.90625 15.5625 35.976562 15.476562 36.222656 15.480469 C 39.175781 15.484375 42.128906 15.484375 45.082031 15.484375 C 45.117188 15.484375 45.15625 15.5 45.210938 15.511719 C 45.210938 16.859375 45.210938 18.199219 45.210938 19.582031 C 44.378906 19.582031 43.558594 19.582031 42.714844 19.582031 C 42.703125 19.75 42.691406 19.875 42.675781 20.054688 C 41.738281 20.054688 40.804688 20.054688 39.785156 20.054688 C 40.011719 20.4375 40.191406 20.753906 40.378906 21.0625 C 41.066406 22.203125 41.769531 23.332031 42.433594 24.484375 C 42.589844 24.75 42.660156 25.09375 42.6875 25.40625 C 42.726562 25.878906 42.695312 26.355469 42.695312 26.871094 C 42.570312 26.878906 42.460938 26.894531 42.347656 26.898438 C 39.933594 26.898438 37.519531 26.894531 35.105469 26.902344 C 34.835938 26.90625 34.730469 26.824219 34.636719 26.566406 C 33.890625 24.441406 33.125 22.324219 32.363281 20.207031 C 32.335938 20.132812 32.296875 20.066406 32.21875 19.898438 C 31.8125 20.992188 31.433594 22.011719 31.035156 23.082031 C 31.671875 23.082031 32.246094 23.070312 32.820312 23.089844 C 32.941406 23.09375 33.132812 23.183594 33.171875 23.277344 C 33.617188 24.457031 34.039062 25.644531 34.492188 26.898438 C 32.132812 26.898438 29.832031 26.898438 27.492188 26.898438 M 38.359375 24.453125 C 38.390625 24.515625 38.425781 24.574219 38.492188 24.699219 C 38.492188 23.0625 38.496094 21.503906 38.484375 19.949219 C 38.484375 19.832031 38.375 19.609375 38.308594 19.609375 C 37.699219 19.582031 37.089844 19.59375 36.421875 19.59375 C 37.078125 21.234375 37.707031 22.820312 38.359375 24.453125 Z M 38.359375 24.453125 "/>
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(9.411765%,9.019608%,9.019608%);fill-opacity:1;" d="M 10.003906 25.308594 C 7.722656 23.445312 6.640625 21.046875 6.84375 18.132812 C 7.144531 13.851562 10.746094 10.554688 15.011719 10.542969 C 16.394531 10.539062 17.6875 10.851562 18.898438 11.507812 C 19.015625 11.570312 19.148438 11.75 19.148438 11.878906 C 19.164062 14.0625 19.160156 16.242188 19.15625 18.425781 C 19.15625 18.472656 19.140625 18.523438 19.128906 18.59375 C 18.507812 18.59375 17.898438 18.59375 17.273438 18.59375 C 17.214844 18.402344 17.167969 18.210938 17.101562 18.027344 C 16.769531 17.09375 15.859375 16.542969 14.789062 16.625 C 13.863281 16.695312 13.074219 17.402344 12.871094 18.34375 C 12.679688 19.238281 13.136719 20.207031 13.957031 20.648438 C 15.25 21.351562 16.792969 20.671875 17.171875 19.242188 C 17.199219 19.136719 17.332031 18.988281 17.421875 18.984375 C 17.984375 18.960938 18.546875 18.972656 19.148438 18.972656 C 19.148438 20.289062 19.148438 21.578125 19.148438 22.898438 C 20.152344 22.898438 21.117188 22.898438 22.097656 22.898438 C 20.3125 26.558594 14.554688 28.792969 10.003906 25.308594 Z M 10.003906 25.308594 "/>
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(9.803922%,9.411765%,9.411765%);fill-opacity:1;" d="M 19.78125 11.4375 C 19.78125 11.253906 19.78125 11.109375 19.78125 10.925781 C 19.90625 10.914062 20.015625 10.898438 20.128906 10.898438 C 21.285156 10.894531 22.4375 10.910156 23.59375 10.886719 C 23.933594 10.882812 24.011719 11 24.003906 11.320312 C 23.988281 12.296875 24 13.277344 24 14.253906 C 24 14.382812 24 14.511719 24 14.65625 C 24.792969 14.65625 25.550781 14.65625 26.355469 14.65625 C 26.355469 13.421875 26.355469 12.1875 26.355469 10.921875 C 27.773438 10.921875 29.144531 10.921875 30.546875 10.921875 C 30.546875 12.214844 30.546875 13.5 30.546875 14.828125 C 30.25 14.828125 29.953125 14.847656 29.65625 14.820312 C 29.359375 14.796875 29.21875 14.910156 29.109375 15.191406 C 28.257812 17.417969 27.390625 19.640625 26.527344 21.863281 C 26.5 21.933594 26.464844 22 26.386719 22.171875 C 26.386719 20.890625 26.386719 19.71875 26.386719 18.511719 C 25.574219 18.511719 24.796875 18.511719 23.988281 18.511719 C 23.988281 19.765625 23.988281 21.015625 23.988281 22.285156 C 22.578125 22.285156 21.207031 22.285156 19.78125 22.285156 C 19.78125 18.679688 19.78125 15.078125 19.78125 11.4375 Z M 19.78125 11.4375 "/>
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(9.803922%,9.411765%,9.411765%);fill-opacity:1;" d="M 47.863281 23.867188 C 47.882812 23.742188 47.871094 23.601562 47.929688 23.5 C 48.410156 22.636719 48.894531 21.78125 49.398438 20.929688 C 49.460938 20.824219 49.632812 20.714844 49.753906 20.714844 C 51.300781 20.699219 52.847656 20.707031 54.476562 20.707031 C 54.375 20.886719 54.296875 21.027344 54.210938 21.164062 C 52.792969 23.507812 51.367188 25.84375 49.957031 28.191406 C 49.84375 28.382812 49.785156 28.632812 49.78125 28.859375 C 49.761719 29.925781 49.773438 30.996094 49.773438 32.085938 C 49.679688 32.097656 49.605469 32.121094 49.53125 32.121094 C 48.324219 32.121094 47.117188 32.113281 45.910156 32.125 C 45.636719 32.128906 45.546875 32.046875 45.550781 31.769531 C 45.5625 30.804688 45.570312 29.839844 45.546875 28.875 C 45.539062 28.628906 45.464844 28.351562 45.335938 28.140625 C 43.902344 25.746094 42.453125 23.363281 41.007812 20.976562 C 40.964844 20.910156 40.929688 20.839844 40.871094 20.734375 C 40.996094 20.722656 41.09375 20.707031 41.1875 20.707031 C 42.632812 20.707031 44.074219 20.714844 45.519531 20.699219 C 45.769531 20.695312 45.886719 20.789062 46.003906 20.992188 C 46.546875 21.953125 47.105469 22.90625 47.6875 23.910156 C 47.980469 24.382812 48.167969 24.867188 48.5 25.246094 C 48.542969 25.21875 48.585938 25.191406 48.628906 25.164062 C 48.375 24.730469 48.121094 24.296875 47.863281 23.867188 Z M 47.863281 23.867188 "/>
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(85.09804%,83.137256%,83.137256%);fill-opacity:1;" d="M 47.824219 23.875 C 48.121094 24.296875 48.375 24.730469 48.628906 25.164062 C 48.585938 25.191406 48.542969 25.21875 48.5 25.246094 C 48.167969 24.867188 47.980469 24.382812 47.703125 23.933594 C 47.722656 23.898438 47.75 23.894531 47.824219 23.875 Z M 47.824219 23.875 "/>
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(95.686275%,93.725491%,93.725491%);fill-opacity:1;" d="M 38.347656 24.429688 C 37.707031 22.820312 37.078125 21.234375 36.421875 19.59375 C 37.089844 19.59375 37.699219 19.582031 38.308594 19.609375 C 38.375 19.609375 38.484375 19.832031 38.484375 19.949219 C 38.496094 21.503906 38.492188 23.0625 38.492188 24.699219 C 38.425781 24.574219 38.390625 24.515625 38.347656 24.429688 Z M 38.347656 24.429688 "/>
</g>
</svg>
</file>

<file path="src/assets/close_icon.svg">
<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M20.7457 3.32851C20.3552 2.93798 19.722 2.93798 19.3315 3.32851L12.0371 10.6229L4.74275 3.32851C4.35223 2.93798 3.71906 2.93798 3.32854 3.32851C2.93801 3.71903 2.93801 4.3522 3.32854 4.74272L10.6229 12.0371L3.32856 19.3314C2.93803 19.722 2.93803 20.3551 3.32856 20.7457C3.71908 21.1362 4.35225 21.1362 4.74277 20.7457L12.0371 13.4513L19.3315 20.7457C19.722 21.1362 20.3552 21.1362 20.7457 20.7457C21.1362 20.3551 21.1362 19.722 20.7457 19.3315L13.4513 12.0371L20.7457 4.74272C21.1362 4.3522 21.1362 3.71903 20.7457 3.32851Z" fill="#ffffff"></path> </g></svg>
</file>

<file path="src/assets/diamond_icon.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-gem-icon lucide-gem"><path d="M10.5 3 8 9l4 13 4-13-2.5-6"/><path d="M17 3a2 2 0 0 1 1.6.8l3 4a2 2 0 0 1 .013 2.382l-7.99 10.986a2 2 0 0 1-3.247 0l-7.99-10.986A2 2 0 0 1 2.4 7.8l2.998-3.997A2 2 0 0 1 7 3z"/><path d="M2 9h20"/></svg>
</file>

<file path="src/assets/favicon.svg">
<svg width="46" height="46" viewBox="0 0 46 46" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="0.796875" y="0.373047" width="44.8326" height="44.8326" rx="12" fill="url(#paint0_linear_8908_4950)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M17.9364 32.186L26.9013 23.2179C28.3149 21.8038 28.3116 19.5106 26.8939 18.1005C25.4822 16.6964 23.2007 16.6985 21.7917 18.1054L12.8182 27.0648C11.4025 28.4783 11.4016 30.772 12.8162 32.1865C14.2302 33.6005 16.5227 33.6003 17.9364 32.186ZM21.7793 20.6608L24.3404 23.2219L25.621 21.9413C26.3282 21.2341 26.3282 20.0874 25.621 19.3802C24.9137 18.673 23.7671 18.673 23.0599 19.3802L21.7793 20.6608Z" fill="white"/>
<path d="M16.3479 12.8463C16.4329 12.5304 16.8811 12.5304 16.9661 12.8463L17.424 14.5469C17.4537 14.6571 17.5398 14.7431 17.6499 14.7728L19.3506 15.2307C19.6664 15.3157 19.6664 15.7639 19.3506 15.849L17.6499 16.3068C17.5398 16.3365 17.4537 16.4226 17.424 16.5327L16.9661 18.2334C16.8811 18.5493 16.4329 18.5493 16.3479 18.2334L15.89 16.5327C15.8603 16.4226 15.7743 16.3365 15.6641 16.3068L13.9635 15.849C13.6476 15.7639 13.6476 15.3157 13.9635 15.2307L15.6641 14.7728C15.7743 14.7431 15.8603 14.6571 15.89 14.5469L16.3479 12.8463Z" fill="white"/>
<path d="M29.1545 11.567C29.2396 11.2511 29.6878 11.2511 29.7728 11.567L30.2307 13.2676C30.2603 13.3778 30.3465 13.4638 30.4566 13.4935L32.1572 13.9514C32.4731 14.0364 32.4731 14.4846 32.1572 14.5697L30.4566 15.0275C30.3465 15.0572 30.2603 15.1433 30.2307 15.2535L29.7728 16.9541C29.6878 17.27 29.2396 17.27 29.1545 16.9541L28.6966 15.2535C28.667 15.1433 28.581 15.0572 28.4707 15.0275L26.7701 14.5697C26.4542 14.4846 26.4542 14.0364 26.7701 13.9514L28.4707 13.4935C28.581 13.4638 28.667 13.3778 28.6966 13.2676L29.1545 11.567Z" fill="white"/>
<path d="M30.4338 23.0944C30.5189 22.7784 30.9671 22.7784 31.0521 23.0944L31.51 24.7949C31.5396 24.9052 31.6258 24.9912 31.7359 25.0208L33.4365 25.4788C33.7524 25.5638 33.7524 26.012 33.4365 26.097L31.7359 26.5549C31.6258 26.5845 31.5396 26.6706 31.51 26.7808L31.0521 28.4814C30.9671 28.7973 30.5189 28.7973 30.4338 28.4814L29.9759 26.7808C29.9463 26.6706 29.8603 26.5845 29.75 26.5549L28.0494 26.097C27.7335 26.012 27.7335 25.5638 28.0494 25.4788L29.75 25.0208C29.8603 24.9912 29.9463 24.9052 29.9759 24.7949L30.4338 23.0944Z" fill="white"/>
<defs>
<linearGradient id="paint0_linear_8908_4950" x1="51.6072" y1="16.8117" x2="-2.19197" y2="27.2726" gradientUnits="userSpaceOnUse">
<stop stop-color="#4080F6"/>
<stop offset="1" stop-color="#A356F7"/>
</linearGradient>
</defs>
</svg>
</file>

<file path="src/assets/gallery_icon.svg">
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Uploaded to: SVG Repo, www.svgrepo.com, Transformed by: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<g id="SVGRepo_bgCarrier" stroke-width="0"/>
<g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"/>
<g id="SVGRepo_iconCarrier"> <circle cx="16" cy="8" r="2" stroke="#ffffff" stroke-width="1.5"/> <path d="M2 12.5001L3.75159 10.9675C4.66286 10.1702 6.03628 10.2159 6.89249 11.0721L11.1822 15.3618C11.8694 16.0491 12.9512 16.1428 13.7464 15.5839L14.0446 15.3744C15.1888 14.5702 16.7369 14.6634 17.7765 15.599L21 18.5001" stroke="#ffffff" stroke-width="1.5" stroke-linecap="round"/> <path d="M22 12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2 19.0711 2 16.714 2 12C2 7.28595 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2C16.714 2 19.0711 2 20.5355 3.46447C21.5093 4.43821 21.8356 5.80655 21.9449 8" stroke="#ffffff" stroke-width="1.5" stroke-linecap="round"/> </g>
</svg>
</file>

<file path="src/assets/into_icon.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2.125" d="M5 19 19 5M19 19 5 5"/></svg>
</file>

<file path="src/assets/logo_full_dark.svg">
<svg width="193" height="46" viewBox="0 0 193 46" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M64.0471 22.242C62.9178 22.242 61.8618 22.0367 60.8791 21.626C59.9111 21.2153 59.0605 20.6507 58.3271 19.932C57.5938 19.1987 57.0218 18.348 56.6111 17.38C56.2151 16.3973 56.0171 15.3487 56.0171 14.234C56.0171 13.1193 56.2151 12.0853 56.6111 11.132C57.0218 10.164 57.5865 9.32067 58.3051 8.602C59.0385 7.86867 59.8891 7.304 60.8571 6.908C61.8251 6.49733 62.8738 6.292 64.0031 6.292C65.1325 6.292 66.1811 6.49733 67.1491 6.908C68.1171 7.304 68.9678 7.86867 69.7011 8.602C70.4345 9.32067 70.9991 10.164 71.3951 11.132C71.8058 12.1 72.0111 13.1413 72.0111 14.256C72.0111 15.3707 71.8058 16.412 71.3951 17.38C70.9991 18.348 70.4345 19.1987 69.7011 19.932C68.9825 20.6507 68.1391 21.2153 67.1711 21.626C66.2031 22.0367 65.1618 22.242 64.0471 22.242ZM71.0211 23.144L63.9371 16.06L65.7411 14.234L72.8471 21.34L71.0211 23.144ZM64.0031 19.448C64.9858 19.448 65.8438 19.228 66.5771 18.788C67.3251 18.348 67.9045 17.7393 68.3151 16.962C68.7405 16.1847 68.9531 15.2753 68.9531 14.234C68.9531 13.4713 68.8285 12.7747 68.5791 12.144C68.3445 11.5133 68.0071 10.9707 67.5671 10.516C67.1271 10.0467 66.6065 9.68733 66.0051 9.438C65.4038 9.18867 64.7365 9.064 64.0031 9.064C63.0351 9.064 62.1771 9.284 61.4291 9.724C60.6958 10.1493 60.1165 10.7507 59.6911 11.528C59.2805 12.3053 59.0751 13.2073 59.0751 14.234C59.0751 15.0113 59.1925 15.7227 59.4271 16.368C59.6765 17.0133 60.0138 17.5633 60.4391 18.018C60.8791 18.4727 61.3998 18.8247 62.0011 19.074C62.6171 19.3233 63.2845 19.448 64.0031 19.448ZM79.058 22.22C78.1193 22.22 77.2833 22.022 76.55 21.626C75.8313 21.23 75.2667 20.68 74.856 19.976C74.4453 19.272 74.24 18.458 74.24 17.534V11.374H77.144V17.468C77.144 17.908 77.2173 18.2893 77.364 18.612C77.5107 18.92 77.7307 19.1547 78.024 19.316C78.3173 19.4773 78.662 19.558 79.058 19.558C79.6593 19.558 80.1287 19.3747 80.466 19.008C80.8033 18.6413 80.972 18.128 80.972 17.468V11.374H83.854V17.534C83.854 18.4727 83.6487 19.294 83.238 19.998C82.842 20.702 82.2773 21.252 81.544 21.648C80.8253 22.0293 79.9967 22.22 79.058 22.22ZM86.149 22V11.374H89.053V22L86.149 22ZM87.601 9.658C87.1317 9.658 86.743 9.504 86.435 9.196C86.127 8.87333 85.973 8.47733 85.973 8.008C85.973 7.55333 86.127 7.16467 86.435 6.842C86.743 6.51933 87.1317 6.358 87.601 6.358C88.085 6.358 88.4737 6.51933 88.767 6.842C89.075 7.16467 89.229 7.55333 89.229 8.008C89.229 8.47733 89.075 8.87333 88.767 9.196C88.4737 9.504 88.085 9.658 87.601 9.658ZM96.6221 22.22C95.5367 22.22 94.5614 21.978 93.6961 21.494C92.8307 21.01 92.1487 20.35 91.6501 19.514C91.1514 18.678 90.9021 17.7393 90.9021 16.698C90.9021 15.642 91.1514 14.696 91.6501 13.86C92.1487 13.024 92.8307 12.364 93.6961 11.88C94.5761 11.3813 95.5514 11.132 96.6221 11.132C97.4581 11.132 98.2281 11.286 98.9321 11.594C99.6361 11.902 100.245 12.342 100.758 12.914L98.9101 14.784C98.6314 14.476 98.2941 14.2413 97.8981 14.08C97.5167 13.9187 97.0914 13.838 96.6221 13.838C96.0941 13.838 95.6174 13.9627 95.1921 14.212C94.7814 14.4467 94.4514 14.7767 94.2021 15.202C93.9674 15.6127 93.8501 16.104 93.8501 16.676C93.8501 17.2333 93.9674 17.732 94.2021 18.172C94.4514 18.5973 94.7814 18.9347 95.1921 19.184C95.6174 19.4187 96.0941 19.536 96.6221 19.536C97.1061 19.536 97.5387 19.4553 97.9201 19.294C98.3161 19.118 98.6534 18.8687 98.9321 18.546L100.802 20.416C100.259 21.0027 99.6361 21.45 98.9321 21.758C98.2281 22.066 97.4581 22.22 96.6221 22.22ZM109.21 22L105.096 16.522L109.188 11.374H112.51L107.714 17.182L107.824 15.774L112.73 22H109.21ZM102.434 22V6.094H105.316V22H102.434ZM121.515 22.22C120.415 22.22 119.381 22.022 118.413 21.626C117.46 21.2153 116.617 20.6433 115.883 19.91C115.165 19.1767 114.6 18.3333 114.189 17.38C113.793 16.412 113.595 15.3707 113.595 14.256C113.595 13.1267 113.801 12.0853 114.211 11.132C114.622 10.164 115.194 9.32067 115.927 8.602C116.661 7.86867 117.519 7.304 118.501 6.908C119.484 6.49733 120.547 6.292 121.691 6.292C122.967 6.292 124.141 6.534 125.211 7.018C126.282 7.48733 127.169 8.15467 127.873 9.02L125.849 11.044C125.365 10.4133 124.764 9.92933 124.045 9.592C123.327 9.25467 122.535 9.086 121.669 9.086C120.687 9.086 119.814 9.306 119.051 9.746C118.303 10.1713 117.717 10.7727 117.291 11.55C116.866 12.3127 116.653 13.2073 116.653 14.234C116.653 15.2607 116.859 16.17 117.269 16.962C117.695 17.7393 118.267 18.348 118.985 18.788C119.719 19.228 120.555 19.448 121.493 19.448C122.461 19.448 123.29 19.272 123.979 18.92C124.669 18.5533 125.197 18.0253 125.563 17.336C125.93 16.632 126.113 15.774 126.113 14.762L128.071 16.104L121.317 16.038V13.442H129.193V13.86C129.193 15.708 128.863 17.2553 128.203 18.502C127.543 19.734 126.634 20.6653 125.475 21.296C124.331 21.912 123.011 22.22 121.515 22.22ZM133.688 16.258V13.816L137.274 13.816C137.744 13.816 138.169 13.7207 138.55 13.53C138.932 13.3393 139.232 13.068 139.452 12.716C139.672 12.3493 139.782 11.9093 139.782 11.396C139.782 10.8973 139.672 10.4647 139.452 10.098C139.232 9.73133 138.932 9.45267 138.55 9.262C138.169 9.07133 137.744 8.976 137.274 8.976L133.688 8.976V6.534H137.582C138.565 6.534 139.445 6.732 140.222 7.128C141.014 7.524 141.638 8.08867 142.092 8.822C142.547 9.54067 142.774 10.3987 142.774 11.396C142.774 12.3933 142.547 13.2587 142.092 13.992C141.638 14.7107 141.014 15.268 140.222 15.664C139.445 16.06 138.565 16.258 137.582 16.258H133.688ZM131.488 22V6.534H134.48V22H131.488ZM148.529 22V6.864H151.543V22L148.529 22ZM143.601 9.196V6.534H156.471V9.196H143.601Z" fill="black"/>
<path d="M56.3511 40V30.284H57.6671V40H56.3511ZM64.4405 40V36.122C64.4405 35.618 64.2818 35.2027 63.9645 34.876C63.6472 34.5493 63.2365 34.386 62.7325 34.386C62.3965 34.386 62.0978 34.4607 61.8365 34.61C61.5752 34.7593 61.3698 34.9647 61.2205 35.226C61.0712 35.4873 60.9965 35.786 60.9965 36.122L60.4785 35.828C60.4785 35.324 60.5905 34.876 60.8145 34.484C61.0385 34.092 61.3512 33.784 61.7525 33.56C62.1538 33.3267 62.6065 33.21 63.1105 33.21C63.6145 33.21 64.0578 33.336 64.4405 33.588C64.8325 33.84 65.1405 34.1713 65.3645 34.582C65.5885 34.9833 65.7005 35.4127 65.7005 35.87V40H64.4405ZM59.7365 40V33.35H60.9965V40H59.7365ZM68.3464 40V30.564H69.6064V40H68.3464ZM66.7084 34.498V33.35H71.2444V34.498H66.7084ZM75.3536 40.14C74.6909 40.14 74.0936 39.9907 73.5616 39.692C73.0296 39.384 72.6096 38.9687 72.3016 38.446C71.9936 37.9233 71.8396 37.3307 71.8396 36.668C71.8396 36.0147 71.9889 35.4267 72.2876 34.904C72.5956 34.3813 73.0063 33.9707 73.5196 33.672C74.0423 33.364 74.6256 33.21 75.2696 33.21C75.8856 33.21 76.4269 33.35 76.8936 33.63C77.3696 33.91 77.7383 34.2973 77.9996 34.792C78.2703 35.2867 78.4056 35.8467 78.4056 36.472C78.4056 36.5653 78.4009 36.668 78.3916 36.78C78.3823 36.8827 78.3636 37.004 78.3356 37.144H72.7216V36.094H77.6636L77.2016 36.5C77.2016 36.052 77.1223 35.674 76.9636 35.366C76.8049 35.0487 76.5809 34.806 76.2916 34.638C76.0023 34.4607 75.6523 34.372 75.2416 34.372C74.8123 34.372 74.4343 34.4653 74.1076 34.652C73.7809 34.8387 73.5289 35.1 73.3516 35.436C73.1743 35.772 73.0856 36.1687 73.0856 36.626C73.0856 37.0927 73.1789 37.5033 73.3656 37.858C73.5523 38.2033 73.8183 38.474 74.1636 38.67C74.5089 38.8567 74.9056 38.95 75.3536 38.95C75.7269 38.95 76.0676 38.8847 76.3756 38.754C76.6929 38.6233 76.9636 38.4273 77.1876 38.166L77.9996 38.992C77.6823 39.3653 77.2903 39.65 76.8236 39.846C76.3663 40.042 75.8763 40.14 75.3536 40.14ZM79.7795 40V30.004H81.0395V40H79.7795ZM82.883 40V30.004H84.143V40H82.883ZM86.0005 40V33.35H87.2605V40H86.0005ZM86.6305 32.02C86.3972 32.02 86.2058 31.9453 86.0565 31.796C85.9072 31.6373 85.8325 31.4413 85.8325 31.208C85.8325 30.984 85.9072 30.7973 86.0565 30.648C86.2058 30.4893 86.3972 30.41 86.6305 30.41C86.8638 30.41 87.0552 30.4893 87.2045 30.648C87.3538 30.7973 87.4285 30.984 87.4285 31.208C87.4285 31.4413 87.3538 31.6373 87.2045 31.796C87.0552 31.9453 86.8638 32.02 86.6305 32.02ZM91.8754 42.926C91.194 42.926 90.5874 42.8 90.0554 42.548C89.5327 42.296 89.1127 41.9413 88.7954 41.484L89.6074 40.658C89.878 41.0033 90.2 41.2647 90.5734 41.442C90.9467 41.6287 91.39 41.722 91.9034 41.722C92.5847 41.722 93.1214 41.54 93.5134 41.176C93.9147 40.8213 94.1154 40.3407 94.1154 39.734V38.082L94.3394 36.584L94.1154 35.1V33.35H95.3754V39.734C95.3754 40.3687 95.226 40.924 94.9274 41.4C94.638 41.876 94.2274 42.2493 93.6954 42.52C93.1727 42.7907 92.566 42.926 91.8754 42.926ZM91.8754 39.888C91.2687 39.888 90.7227 39.7433 90.2374 39.454C89.7614 39.1647 89.3834 38.768 89.1034 38.264C88.8234 37.7507 88.6834 37.1767 88.6834 36.542C88.6834 35.9073 88.8234 35.3427 89.1034 34.848C89.3834 34.344 89.7614 33.9473 90.2374 33.658C90.7227 33.3593 91.2687 33.21 91.8754 33.21C92.398 33.21 92.86 33.3127 93.2614 33.518C93.6627 33.7233 93.98 34.0127 94.2134 34.386C94.456 34.75 94.5867 35.1793 94.6054 35.674V37.438C94.5774 37.9233 94.442 38.3527 94.1994 38.726C93.966 39.09 93.6487 39.3747 93.2474 39.58C92.846 39.7853 92.3887 39.888 91.8754 39.888ZM92.1274 38.698C92.538 38.698 92.8974 38.6093 93.2054 38.432C93.5227 38.2547 93.7654 38.0073 93.9334 37.69C94.1014 37.3633 94.1854 36.9853 94.1854 36.556C94.1854 36.1267 94.0967 35.7533 93.9194 35.436C93.7514 35.1093 93.5134 34.8573 93.2054 34.68C92.8974 34.4933 92.5334 34.4 92.1134 34.4C91.6934 34.4 91.3247 34.4933 91.0074 34.68C90.69 34.8573 90.438 35.1093 90.2514 35.436C90.074 35.7533 89.9854 36.122 89.9854 36.542C89.9854 36.962 90.074 37.3353 90.2514 37.662C90.438 37.9887 90.69 38.2453 91.0074 38.432C91.334 38.6093 91.7074 38.698 92.1274 38.698ZM100.305 40.14C99.6421 40.14 99.0448 39.9907 98.5128 39.692C97.9808 39.384 97.5608 38.9687 97.2528 38.446C96.9448 37.9233 96.7908 37.3307 96.7908 36.668C96.7908 36.0147 96.9401 35.4267 97.2388 34.904C97.5468 34.3813 97.9574 33.9707 98.4708 33.672C98.9934 33.364 99.5768 33.21 100.221 33.21C100.837 33.21 101.378 33.35 101.845 33.63C102.321 33.91 102.689 34.2973 102.951 34.792C103.221 35.2867 103.357 35.8467 103.357 36.472C103.357 36.5653 103.352 36.668 103.343 36.78C103.333 36.8827 103.315 37.004 103.287 37.144H97.6728V36.094H102.615L102.153 36.5C102.153 36.052 102.073 35.674 101.915 35.366C101.756 35.0487 101.532 34.806 101.243 34.638C100.953 34.4607 100.603 34.372 100.193 34.372C99.7634 34.372 99.3854 34.4653 99.0588 34.652C98.7321 34.8387 98.4801 35.1 98.3028 35.436C98.1254 35.772 98.0368 36.1687 98.0368 36.626C98.0368 37.0927 98.1301 37.5033 98.3168 37.858C98.5034 38.2033 98.7694 38.474 99.1148 38.67C99.4601 38.8567 99.8568 38.95 100.305 38.95C100.678 38.95 101.019 38.8847 101.327 38.754C101.644 38.6233 101.915 38.4273 102.139 38.166L102.951 38.992C102.633 39.3653 102.241 39.65 101.775 39.846C101.317 40.042 100.827 40.14 100.305 40.14ZM109.435 40V36.122C109.435 35.618 109.276 35.2027 108.959 34.876C108.641 34.5493 108.231 34.386 107.727 34.386C107.391 34.386 107.092 34.4607 106.831 34.61C106.569 34.7593 106.364 34.9647 106.215 35.226C106.065 35.4873 105.991 35.786 105.991 36.122L105.473 35.828C105.473 35.324 105.585 34.876 105.809 34.484C106.033 34.092 106.345 33.784 106.747 33.56C107.148 33.3267 107.601 33.21 108.105 33.21C108.609 33.21 109.052 33.336 109.435 33.588C109.827 33.84 110.135 34.1713 110.359 34.582C110.583 34.9833 110.695 35.4127 110.695 35.87V40H109.435ZM104.731 40V33.35H105.991V40H104.731ZM113.341 40V30.564H114.601V40H113.341ZM111.703 34.498V33.35H116.239V34.498H111.703ZM119.498 40L123.474 30.284H124.426L128.388 40H126.96L123.698 31.782H124.188L120.898 40H119.498ZM121.388 37.802V36.654H126.498V37.802H121.388ZM129.851 40V30.284H131.167V40H129.851ZM135.262 40L139.238 30.284H140.19L144.152 40H142.724L139.462 31.782H139.952L136.662 40H135.262ZM137.152 37.802V36.654H142.262V37.802H137.152ZM147.614 40.14C147.241 40.14 146.886 40.0933 146.55 40C146.224 39.8973 145.92 39.7573 145.64 39.58C145.36 39.3933 145.118 39.174 144.912 38.922L145.724 38.11C145.967 38.4087 146.247 38.6327 146.564 38.782C146.882 38.922 147.236 38.992 147.628 38.992C148.02 38.992 148.324 38.9267 148.538 38.796C148.753 38.656 148.86 38.4647 148.86 38.222C148.86 37.9793 148.772 37.7927 148.594 37.662C148.426 37.522 148.207 37.41 147.936 37.326C147.666 37.2327 147.376 37.144 147.068 37.06C146.77 36.9667 146.485 36.85 146.214 36.71C145.944 36.57 145.72 36.3787 145.542 36.136C145.374 35.8933 145.29 35.5713 145.29 35.17C145.29 34.7687 145.388 34.4233 145.584 34.134C145.78 33.8353 146.051 33.6067 146.396 33.448C146.751 33.2893 147.176 33.21 147.67 33.21C148.193 33.21 148.655 33.3033 149.056 33.49C149.467 33.6673 149.803 33.938 150.064 34.302L149.252 35.114C149.066 34.8713 148.832 34.6847 148.552 34.554C148.282 34.4233 147.974 34.358 147.628 34.358C147.264 34.358 146.984 34.4233 146.788 34.554C146.602 34.6753 146.508 34.848 146.508 35.072C146.508 35.296 146.592 35.4687 146.76 35.59C146.928 35.7113 147.148 35.814 147.418 35.898C147.698 35.982 147.988 36.0707 148.286 36.164C148.585 36.248 148.87 36.3647 149.14 36.514C149.411 36.6633 149.63 36.864 149.798 37.116C149.976 37.368 150.064 37.6993 150.064 38.11C150.064 38.7353 149.84 39.23 149.392 39.594C148.954 39.958 148.361 40.14 147.614 40.14ZM153.589 40.14C153.215 40.14 152.861 40.0933 152.525 40C152.198 39.8973 151.895 39.7573 151.615 39.58C151.335 39.3933 151.092 39.174 150.887 38.922L151.699 38.11C151.941 38.4087 152.221 38.6327 152.539 38.782C152.856 38.922 153.211 38.992 153.603 38.992C153.995 38.992 154.298 38.9267 154.513 38.796C154.727 38.656 154.835 38.4647 154.835 38.222C154.835 37.9793 154.746 37.7927 154.569 37.662C154.401 37.522 154.181 37.41 153.911 37.326C153.64 37.2327 153.351 37.144 153.043 37.06C152.744 36.9667 152.459 36.85 152.189 36.71C151.918 36.57 151.694 36.3787 151.517 36.136C151.349 35.8933 151.265 35.5713 151.265 35.17C151.265 34.7687 151.363 34.4233 151.559 34.134C151.755 33.8353 152.025 33.6067 152.371 33.448C152.725 33.2893 153.15 33.21 153.645 33.21C154.167 33.21 154.629 33.3033 155.031 33.49C155.441 33.6673 155.777 33.938 156.039 34.302L155.227 35.114C155.04 34.8713 154.807 34.6847 154.527 34.554C154.256 34.4233 153.948 34.358 153.603 34.358C153.239 34.358 152.959 34.4233 152.763 34.554C152.576 34.6753 152.483 34.848 152.483 35.072C152.483 35.296 152.567 35.4687 152.735 35.59C152.903 35.7113 153.122 35.814 153.393 35.898C153.673 35.982 153.962 36.0707 154.261 36.164C154.559 36.248 154.844 36.3647 155.115 36.514C155.385 36.6633 155.605 36.864 155.773 37.116C155.95 37.368 156.039 37.6993 156.039 38.11C156.039 38.7353 155.815 39.23 155.367 39.594C154.928 39.958 154.335 40.14 153.589 40.14ZM157.463 40V33.35H158.723V40H157.463ZM158.093 32.02C157.86 32.02 157.669 31.9453 157.519 31.796C157.37 31.6373 157.295 31.4413 157.295 31.208C157.295 30.984 157.37 30.7973 157.519 30.648C157.669 30.4893 157.86 30.41 158.093 30.41C158.327 30.41 158.518 30.4893 158.667 30.648C158.817 30.7973 158.891 30.984 158.891 31.208C158.891 31.4413 158.817 31.6373 158.667 31.796C158.518 31.9453 158.327 32.02 158.093 32.02ZM162.694 40.14C162.321 40.14 161.966 40.0933 161.63 40C161.304 39.8973 161 39.7573 160.72 39.58C160.44 39.3933 160.198 39.174 159.992 38.922L160.804 38.11C161.047 38.4087 161.327 38.6327 161.644 38.782C161.962 38.922 162.316 38.992 162.708 38.992C163.1 38.992 163.404 38.9267 163.618 38.796C163.833 38.656 163.94 38.4647 163.94 38.222C163.94 37.9793 163.852 37.7927 163.674 37.662C163.506 37.522 163.287 37.41 163.016 37.326C162.746 37.2327 162.456 37.144 162.148 37.06C161.85 36.9667 161.565 36.85 161.294 36.71C161.024 36.57 160.8 36.3787 160.622 36.136C160.454 35.8933 160.37 35.5713 160.37 35.17C160.37 34.7687 160.468 34.4233 160.664 34.134C160.86 33.8353 161.131 33.6067 161.476 33.448C161.831 33.2893 162.256 33.21 162.75 33.21C163.273 33.21 163.735 33.3033 164.136 33.49C164.547 33.6673 164.883 33.938 165.144 34.302L164.332 35.114C164.146 34.8713 163.912 34.6847 163.632 34.554C163.362 34.4233 163.054 34.358 162.708 34.358C162.344 34.358 162.064 34.4233 161.868 34.554C161.682 34.6753 161.588 34.848 161.588 35.072C161.588 35.296 161.672 35.4687 161.84 35.59C162.008 35.7113 162.228 35.814 162.498 35.898C162.778 35.982 163.068 36.0707 163.366 36.164C163.665 36.248 163.95 36.3647 164.22 36.514C164.491 36.6633 164.71 36.864 164.878 37.116C165.056 37.368 165.144 37.6993 165.144 38.11C165.144 38.7353 164.92 39.23 164.472 39.594C164.034 39.958 163.441 40.14 162.694 40.14ZM167.577 40V30.564H168.837V40H167.577ZM165.939 34.498V33.35H170.475V34.498H165.939ZM174.332 40.14C173.725 40.14 173.175 39.9907 172.68 39.692C172.185 39.384 171.793 38.9687 171.504 38.446C171.224 37.9233 171.084 37.3353 171.084 36.682C171.084 36.0287 171.224 35.4407 171.504 34.918C171.793 34.3953 172.181 33.98 172.666 33.672C173.161 33.364 173.716 33.21 174.332 33.21C174.836 33.21 175.284 33.3173 175.676 33.532C176.077 33.7373 176.399 34.0267 176.642 34.4C176.885 34.764 177.02 35.1887 177.048 35.674V37.676C177.02 38.152 176.885 38.5767 176.642 38.95C176.409 39.3233 176.091 39.6173 175.69 39.832C175.298 40.0373 174.845 40.14 174.332 40.14ZM174.542 38.95C175.167 38.95 175.671 38.74 176.054 38.32C176.437 37.8907 176.628 37.3447 176.628 36.682C176.628 36.2247 176.539 35.828 176.362 35.492C176.194 35.1467 175.951 34.8807 175.634 34.694C175.317 34.498 174.948 34.4 174.528 34.4C174.108 34.4 173.735 34.498 173.408 34.694C173.091 34.89 172.839 35.1607 172.652 35.506C172.475 35.842 172.386 36.2293 172.386 36.668C172.386 37.116 172.475 37.5127 172.652 37.858C172.839 38.194 173.095 38.46 173.422 38.656C173.749 38.852 174.122 38.95 174.542 38.95ZM176.544 40V38.208L176.782 36.584L176.544 34.974V33.35H177.818V40H176.544ZM184.357 40V36.122C184.357 35.618 184.198 35.2027 183.881 34.876C183.563 34.5493 183.153 34.386 182.649 34.386C182.313 34.386 182.014 34.4607 181.753 34.61C181.491 34.7593 181.286 34.9647 181.137 35.226C180.987 35.4873 180.913 35.786 180.913 36.122L180.395 35.828C180.395 35.324 180.507 34.876 180.731 34.484C180.955 34.092 181.267 33.784 181.669 33.56C182.07 33.3267 182.523 33.21 183.027 33.21C183.531 33.21 183.974 33.336 184.357 33.588C184.749 33.84 185.057 34.1713 185.281 34.582C185.505 34.9833 185.617 35.4127 185.617 35.87V40H184.357ZM179.653 40V33.35H180.913V40H179.653ZM188.262 40V30.564H189.522V40H188.262ZM186.624 34.498V33.35H191.16V34.498H186.624Z" fill="#7100DE"/>
<rect y="0.373047" width="44.8326" height="44.8326" rx="12" fill="url(#paint0_linear_8977_4661)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M17.1395 32.186L26.1044 23.2179C27.518 21.8038 27.5147 19.5106 26.097 18.1005C24.6853 16.6964 22.4039 16.6985 20.9949 18.1054L12.0213 27.0648C10.6057 28.4783 10.6048 30.772 12.0193 32.1865C13.4333 33.6005 15.7258 33.6003 17.1395 32.186ZM20.9824 20.6608L23.5436 23.2219L24.8241 21.9413C25.5314 21.2341 25.5314 20.0874 24.8241 19.3802C24.1169 18.673 22.9703 18.673 22.263 19.3802L20.9824 20.6608Z" fill="white"/>
<path d="M15.551 12.8463C15.6361 12.5304 16.0842 12.5304 16.1693 12.8463L16.6272 14.5469C16.6568 14.6571 16.7429 14.7431 16.8531 14.7728L18.5537 15.2307C18.8696 15.3157 18.8696 15.7639 18.5537 15.849L16.8531 16.3068C16.7429 16.3365 16.6568 16.4226 16.6272 16.5327L16.1693 18.2334C16.0842 18.5493 15.6361 18.5493 15.551 18.2334L15.0931 16.5327C15.0635 16.4226 14.9774 16.3365 14.8672 16.3068L13.1666 15.849C12.8507 15.7639 12.8507 15.3157 13.1666 15.2307L14.8672 14.7728C14.9774 14.7431 15.0635 14.6571 15.0931 14.5469L15.551 12.8463Z" fill="white"/>
<path d="M28.3577 11.567C28.4427 11.2511 28.8909 11.2511 28.9759 11.567L29.4338 13.2676C29.4634 13.3778 29.5496 13.4638 29.6597 13.4935L31.3603 13.9514C31.6762 14.0364 31.6762 14.4846 31.3603 14.5697L29.6597 15.0275C29.5496 15.0572 29.4634 15.1433 29.4338 15.2535L28.9759 16.9541C28.8909 17.27 28.4427 17.27 28.3577 16.9541L27.8997 15.2535C27.8702 15.1433 27.7841 15.0572 27.6738 15.0275L25.9733 14.5697C25.6573 14.4846 25.6573 14.0364 25.9733 13.9514L27.6738 13.4935C27.7841 13.4638 27.8702 13.3778 27.8997 13.2676L28.3577 11.567Z" fill="white"/>
<path d="M29.637 23.0944C29.722 22.7784 30.1702 22.7784 30.2552 23.0944L30.7131 24.7949C30.7427 24.9052 30.8289 24.9912 30.939 25.0208L32.6396 25.4788C32.9555 25.5638 32.9555 26.012 32.6396 26.097L30.939 26.5549C30.8289 26.5845 30.7427 26.6706 30.7131 26.7808L30.2552 28.4814C30.1702 28.7973 29.722 28.7973 29.637 28.4814L29.179 26.7808C29.1494 26.6706 29.0634 26.5845 28.9531 26.5549L27.2526 26.097C26.9366 26.012 26.9366 25.5638 27.2526 25.4788L28.9531 25.0208C29.0634 24.9912 29.1494 24.9052 29.179 24.7949L29.637 23.0944Z" fill="white"/>
<defs>
<linearGradient id="paint0_linear_8977_4661" x1="50.8103" y1="16.8117" x2="-2.98884" y2="27.2726" gradientUnits="userSpaceOnUse">
<stop stop-color="#4080F6"/>
<stop offset="1" stop-color="#A356F7"/>
</linearGradient>
</defs>
</svg>
</file>

<file path="src/assets/logo_full.svg">
<svg width="193" height="46" viewBox="0 0 193 46" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M64.844 22.242C63.7147 22.242 62.6587 22.0367 61.676 21.626C60.708 21.2153 59.8573 20.6507 59.124 19.932C58.3907 19.1987 57.8187 18.348 57.408 17.38C57.012 16.3973 56.814 15.3487 56.814 14.234C56.814 13.1193 57.012 12.0853 57.408 11.132C57.8187 10.164 58.3833 9.32067 59.102 8.602C59.8353 7.86867 60.686 7.304 61.654 6.908C62.622 6.49733 63.6707 6.292 64.8 6.292C65.9293 6.292 66.978 6.49733 67.946 6.908C68.914 7.304 69.7647 7.86867 70.498 8.602C71.2313 9.32067 71.796 10.164 72.192 11.132C72.6027 12.1 72.808 13.1413 72.808 14.256C72.808 15.3707 72.6027 16.412 72.192 17.38C71.796 18.348 71.2313 19.1987 70.498 19.932C69.7793 20.6507 68.936 21.2153 67.968 21.626C67 22.0367 65.9587 22.242 64.844 22.242ZM71.818 23.144L64.734 16.06L66.538 14.234L73.644 21.34L71.818 23.144ZM64.8 19.448C65.7827 19.448 66.6407 19.228 67.374 18.788C68.122 18.348 68.7013 17.7393 69.112 16.962C69.5373 16.1847 69.75 15.2753 69.75 14.234C69.75 13.4713 69.6253 12.7747 69.376 12.144C69.1413 11.5133 68.804 10.9707 68.364 10.516C67.924 10.0467 67.4033 9.68733 66.802 9.438C66.2007 9.18867 65.5333 9.064 64.8 9.064C63.832 9.064 62.974 9.284 62.226 9.724C61.4927 10.1493 60.9133 10.7507 60.488 11.528C60.0773 12.3053 59.872 13.2073 59.872 14.234C59.872 15.0113 59.9893 15.7227 60.224 16.368C60.4733 17.0133 60.8107 17.5633 61.236 18.018C61.676 18.4727 62.1967 18.8247 62.798 19.074C63.414 19.3233 64.0813 19.448 64.8 19.448ZM79.8549 22.22C78.9162 22.22 78.0802 22.022 77.3469 21.626C76.6282 21.23 76.0635 20.68 75.6529 19.976C75.2422 19.272 75.0369 18.458 75.0369 17.534V11.374H77.9409V17.468C77.9409 17.908 78.0142 18.2893 78.1609 18.612C78.3075 18.92 78.5275 19.1547 78.8209 19.316C79.1142 19.4773 79.4589 19.558 79.8549 19.558C80.4562 19.558 80.9255 19.3747 81.2629 19.008C81.6002 18.6413 81.7689 18.128 81.7689 17.468V11.374H84.6509V17.534C84.6509 18.4727 84.4455 19.294 84.0349 19.998C83.6389 20.702 83.0742 21.252 82.3409 21.648C81.6222 22.0293 80.7935 22.22 79.8549 22.22ZM86.9459 22V11.374H89.8499V22L86.9459 22ZM88.3979 9.658C87.9286 9.658 87.5399 9.504 87.2319 9.196C86.9239 8.87333 86.7699 8.47733 86.7699 8.008C86.7699 7.55333 86.9239 7.16467 87.2319 6.842C87.5399 6.51933 87.9286 6.358 88.3979 6.358C88.8819 6.358 89.2706 6.51933 89.5639 6.842C89.8719 7.16467 90.0259 7.55333 90.0259 8.008C90.0259 8.47733 89.8719 8.87333 89.5639 9.196C89.2706 9.504 88.8819 9.658 88.3979 9.658ZM97.419 22.22C96.3336 22.22 95.3583 21.978 94.493 21.494C93.6276 21.01 92.9456 20.35 92.447 19.514C91.9483 18.678 91.699 17.7393 91.699 16.698C91.699 15.642 91.9483 14.696 92.447 13.86C92.9456 13.024 93.6276 12.364 94.493 11.88C95.373 11.3813 96.3483 11.132 97.419 11.132C98.255 11.132 99.025 11.286 99.729 11.594C100.433 11.902 101.042 12.342 101.555 12.914L99.707 14.784C99.4283 14.476 99.091 14.2413 98.695 14.08C98.3136 13.9187 97.8883 13.838 97.419 13.838C96.891 13.838 96.4143 13.9627 95.989 14.212C95.5783 14.4467 95.2483 14.7767 94.999 15.202C94.7643 15.6127 94.647 16.104 94.647 16.676C94.647 17.2333 94.7643 17.732 94.999 18.172C95.2483 18.5973 95.5783 18.9347 95.989 19.184C96.4143 19.4187 96.891 19.536 97.419 19.536C97.903 19.536 98.3356 19.4553 98.717 19.294C99.113 19.118 99.4503 18.8687 99.729 18.546L101.599 20.416C101.056 21.0027 100.433 21.45 99.729 21.758C99.025 22.066 98.255 22.22 97.419 22.22ZM110.007 22L105.893 16.522L109.985 11.374H113.307L108.511 17.182L108.621 15.774L113.527 22H110.007ZM103.231 22V6.094H106.113V22H103.231ZM122.312 22.22C121.212 22.22 120.178 22.022 119.21 21.626C118.257 21.2153 117.413 20.6433 116.68 19.91C115.961 19.1767 115.397 18.3333 114.986 17.38C114.59 16.412 114.392 15.3707 114.392 14.256C114.392 13.1267 114.597 12.0853 115.008 11.132C115.419 10.164 115.991 9.32067 116.724 8.602C117.457 7.86867 118.315 7.304 119.298 6.908C120.281 6.49733 121.344 6.292 122.488 6.292C123.764 6.292 124.937 6.534 126.008 7.018C127.079 7.48733 127.966 8.15467 128.67 9.02L126.646 11.044C126.162 10.4133 125.561 9.92933 124.842 9.592C124.123 9.25467 123.331 9.086 122.466 9.086C121.483 9.086 120.611 9.306 119.848 9.746C119.1 10.1713 118.513 10.7727 118.088 11.55C117.663 12.3127 117.45 13.2073 117.45 14.234C117.45 15.2607 117.655 16.17 118.066 16.962C118.491 17.7393 119.063 18.348 119.782 18.788C120.515 19.228 121.351 19.448 122.29 19.448C123.258 19.448 124.087 19.272 124.776 18.92C125.465 18.5533 125.993 18.0253 126.36 17.336C126.727 16.632 126.91 15.774 126.91 14.762L128.868 16.104L122.114 16.038V13.442H129.99V13.86C129.99 15.708 129.66 17.2553 129 18.502C128.34 19.734 127.431 20.6653 126.272 21.296C125.128 21.912 123.808 22.22 122.312 22.22ZM134.485 16.258V13.816L138.071 13.816C138.541 13.816 138.966 13.7207 139.347 13.53C139.729 13.3393 140.029 13.068 140.249 12.716C140.469 12.3493 140.579 11.9093 140.579 11.396C140.579 10.8973 140.469 10.4647 140.249 10.098C140.029 9.73133 139.729 9.45267 139.347 9.262C138.966 9.07133 138.541 8.976 138.071 8.976L134.485 8.976V6.534H138.379C139.362 6.534 140.242 6.732 141.019 7.128C141.811 7.524 142.435 8.08867 142.889 8.822C143.344 9.54067 143.571 10.3987 143.571 11.396C143.571 12.3933 143.344 13.2587 142.889 13.992C142.435 14.7107 141.811 15.268 141.019 15.664C140.242 16.06 139.362 16.258 138.379 16.258H134.485ZM132.285 22V6.534H135.277V22H132.285ZM149.326 22V6.864H152.34V22L149.326 22ZM144.398 9.196V6.534H157.268V9.196H144.398Z" fill="white"/>
<path d="M57.148 40V30.284H58.464V40H57.148ZM65.2374 40V36.122C65.2374 35.618 65.0787 35.2027 64.7614 34.876C64.444 34.5493 64.0334 34.386 63.5294 34.386C63.1934 34.386 62.8947 34.4607 62.6334 34.61C62.372 34.7593 62.1667 34.9647 62.0174 35.226C61.868 35.4873 61.7934 35.786 61.7934 36.122L61.2754 35.828C61.2754 35.324 61.3874 34.876 61.6114 34.484C61.8354 34.092 62.148 33.784 62.5494 33.56C62.9507 33.3267 63.4034 33.21 63.9074 33.21C64.4114 33.21 64.8547 33.336 65.2374 33.588C65.6294 33.84 65.9374 34.1713 66.1614 34.582C66.3854 34.9833 66.4974 35.4127 66.4974 35.87V40H65.2374ZM60.5334 40V33.35H61.7934V40H60.5334ZM69.1433 40V30.564H70.4033V40H69.1433ZM67.5053 34.498V33.35H72.0413V34.498H67.5053ZM76.1505 40.14C75.4878 40.14 74.8905 39.9907 74.3585 39.692C73.8265 39.384 73.4065 38.9687 73.0985 38.446C72.7905 37.9233 72.6365 37.3307 72.6365 36.668C72.6365 36.0147 72.7858 35.4267 73.0845 34.904C73.3925 34.3813 73.8032 33.9707 74.3165 33.672C74.8392 33.364 75.4225 33.21 76.0665 33.21C76.6825 33.21 77.2238 33.35 77.6905 33.63C78.1665 33.91 78.5352 34.2973 78.7965 34.792C79.0672 35.2867 79.2025 35.8467 79.2025 36.472C79.2025 36.5653 79.1978 36.668 79.1885 36.78C79.1792 36.8827 79.1605 37.004 79.1325 37.144H73.5185V36.094H78.4605L77.9985 36.5C77.9985 36.052 77.9192 35.674 77.7605 35.366C77.6018 35.0487 77.3778 34.806 77.0885 34.638C76.7992 34.4607 76.4492 34.372 76.0385 34.372C75.6092 34.372 75.2312 34.4653 74.9045 34.652C74.5778 34.8387 74.3258 35.1 74.1485 35.436C73.9712 35.772 73.8825 36.1687 73.8825 36.626C73.8825 37.0927 73.9758 37.5033 74.1625 37.858C74.3492 38.2033 74.6152 38.474 74.9605 38.67C75.3058 38.8567 75.7025 38.95 76.1505 38.95C76.5238 38.95 76.8645 38.8847 77.1725 38.754C77.4898 38.6233 77.7605 38.4273 77.9845 38.166L78.7965 38.992C78.4792 39.3653 78.0872 39.65 77.6205 39.846C77.1632 40.042 76.6732 40.14 76.1505 40.14ZM80.5763 40V30.004H81.8363V40H80.5763ZM83.6799 40V30.004H84.9399V40H83.6799ZM86.7974 40V33.35H88.0574V40H86.7974ZM87.4274 32.02C87.194 32.02 87.0027 31.9453 86.8534 31.796C86.704 31.6373 86.6294 31.4413 86.6294 31.208C86.6294 30.984 86.704 30.7973 86.8534 30.648C87.0027 30.4893 87.194 30.41 87.4274 30.41C87.6607 30.41 87.852 30.4893 88.0014 30.648C88.1507 30.7973 88.2254 30.984 88.2254 31.208C88.2254 31.4413 88.1507 31.6373 88.0014 31.796C87.852 31.9453 87.6607 32.02 87.4274 32.02ZM92.6722 42.926C91.9909 42.926 91.3842 42.8 90.8522 42.548C90.3296 42.296 89.9096 41.9413 89.5922 41.484L90.4042 40.658C90.6749 41.0033 90.9969 41.2647 91.3702 41.442C91.7436 41.6287 92.1869 41.722 92.7002 41.722C93.3816 41.722 93.9182 41.54 94.3102 41.176C94.7116 40.8213 94.9122 40.3407 94.9122 39.734V38.082L95.1362 36.584L94.9122 35.1V33.35H96.1722V39.734C96.1722 40.3687 96.0229 40.924 95.7242 41.4C95.4349 41.876 95.0242 42.2493 94.4922 42.52C93.9696 42.7907 93.3629 42.926 92.6722 42.926ZM92.6722 39.888C92.0656 39.888 91.5196 39.7433 91.0342 39.454C90.5582 39.1647 90.1802 38.768 89.9002 38.264C89.6202 37.7507 89.4802 37.1767 89.4802 36.542C89.4802 35.9073 89.6202 35.3427 89.9002 34.848C90.1802 34.344 90.5582 33.9473 91.0342 33.658C91.5196 33.3593 92.0656 33.21 92.6722 33.21C93.1949 33.21 93.6569 33.3127 94.0582 33.518C94.4596 33.7233 94.7769 34.0127 95.0102 34.386C95.2529 34.75 95.3836 35.1793 95.4022 35.674V37.438C95.3742 37.9233 95.2389 38.3527 94.9962 38.726C94.7629 39.09 94.4456 39.3747 94.0442 39.58C93.6429 39.7853 93.1856 39.888 92.6722 39.888ZM92.9242 38.698C93.3349 38.698 93.6942 38.6093 94.0022 38.432C94.3196 38.2547 94.5622 38.0073 94.7302 37.69C94.8982 37.3633 94.9822 36.9853 94.9822 36.556C94.9822 36.1267 94.8936 35.7533 94.7162 35.436C94.5482 35.1093 94.3102 34.8573 94.0022 34.68C93.6942 34.4933 93.3302 34.4 92.9102 34.4C92.4902 34.4 92.1216 34.4933 91.8042 34.68C91.4869 34.8573 91.2349 35.1093 91.0482 35.436C90.8709 35.7533 90.7822 36.122 90.7822 36.542C90.7822 36.962 90.8709 37.3353 91.0482 37.662C91.2349 37.9887 91.4869 38.2453 91.8042 38.432C92.1309 38.6093 92.5042 38.698 92.9242 38.698ZM101.102 40.14C100.439 40.14 99.8417 39.9907 99.3097 39.692C98.7777 39.384 98.3577 38.9687 98.0497 38.446C97.7417 37.9233 97.5877 37.3307 97.5877 36.668C97.5877 36.0147 97.737 35.4267 98.0357 34.904C98.3437 34.3813 98.7543 33.9707 99.2677 33.672C99.7903 33.364 100.374 33.21 101.018 33.21C101.634 33.21 102.175 33.35 102.642 33.63C103.118 33.91 103.486 34.2973 103.748 34.792C104.018 35.2867 104.154 35.8467 104.154 36.472C104.154 36.5653 104.149 36.668 104.14 36.78C104.13 36.8827 104.112 37.004 104.084 37.144H98.4697V36.094H103.412L102.95 36.5C102.95 36.052 102.87 35.674 102.712 35.366C102.553 35.0487 102.329 34.806 102.04 34.638C101.75 34.4607 101.4 34.372 100.99 34.372C100.56 34.372 100.182 34.4653 99.8557 34.652C99.529 34.8387 99.277 35.1 99.0997 35.436C98.9223 35.772 98.8337 36.1687 98.8337 36.626C98.8337 37.0927 98.927 37.5033 99.1137 37.858C99.3003 38.2033 99.5663 38.474 99.9117 38.67C100.257 38.8567 100.654 38.95 101.102 38.95C101.475 38.95 101.816 38.8847 102.124 38.754C102.441 38.6233 102.712 38.4273 102.936 38.166L103.748 38.992C103.43 39.3653 103.038 39.65 102.572 39.846C102.114 40.042 101.624 40.14 101.102 40.14ZM110.232 40V36.122C110.232 35.618 110.073 35.2027 109.756 34.876C109.438 34.5493 109.028 34.386 108.524 34.386C108.188 34.386 107.889 34.4607 107.628 34.61C107.366 34.7593 107.161 34.9647 107.012 35.226C106.862 35.4873 106.788 35.786 106.788 36.122L106.27 35.828C106.27 35.324 106.382 34.876 106.606 34.484C106.83 34.092 107.142 33.784 107.544 33.56C107.945 33.3267 108.398 33.21 108.902 33.21C109.406 33.21 109.849 33.336 110.232 33.588C110.624 33.84 110.932 34.1713 111.156 34.582C111.38 34.9833 111.492 35.4127 111.492 35.87V40H110.232ZM105.528 40V33.35H106.788V40H105.528ZM114.137 40V30.564H115.397V40H114.137ZM112.499 34.498V33.35H117.035V34.498H112.499ZM120.295 40L124.271 30.284H125.223L129.185 40H127.757L124.495 31.782H124.985L121.695 40H120.295ZM122.185 37.802V36.654H127.295V37.802H122.185ZM130.648 40V30.284H131.964V40H130.648ZM136.059 40L140.035 30.284H140.987L144.949 40H143.521L140.259 31.782H140.749L137.459 40H136.059ZM137.949 37.802V36.654H143.059V37.802H137.949ZM148.411 40.14C148.038 40.14 147.683 40.0933 147.347 40C147.02 39.8973 146.717 39.7573 146.437 39.58C146.157 39.3933 145.914 39.174 145.709 38.922L146.521 38.11C146.764 38.4087 147.044 38.6327 147.361 38.782C147.678 38.922 148.033 38.992 148.425 38.992C148.817 38.992 149.12 38.9267 149.335 38.796C149.55 38.656 149.657 38.4647 149.657 38.222C149.657 37.9793 149.568 37.7927 149.391 37.662C149.223 37.522 149.004 37.41 148.733 37.326C148.462 37.2327 148.173 37.144 147.865 37.06C147.566 36.9667 147.282 36.85 147.011 36.71C146.74 36.57 146.516 36.3787 146.339 36.136C146.171 35.8933 146.087 35.5713 146.087 35.17C146.087 34.7687 146.185 34.4233 146.381 34.134C146.577 33.8353 146.848 33.6067 147.193 33.448C147.548 33.2893 147.972 33.21 148.467 33.21C148.99 33.21 149.452 33.3033 149.853 33.49C150.264 33.6673 150.6 33.938 150.861 34.302L150.049 35.114C149.862 34.8713 149.629 34.6847 149.349 34.554C149.078 34.4233 148.77 34.358 148.425 34.358C148.061 34.358 147.781 34.4233 147.585 34.554C147.398 34.6753 147.305 34.848 147.305 35.072C147.305 35.296 147.389 35.4687 147.557 35.59C147.725 35.7113 147.944 35.814 148.215 35.898C148.495 35.982 148.784 36.0707 149.083 36.164C149.382 36.248 149.666 36.3647 149.937 36.514C150.208 36.6633 150.427 36.864 150.595 37.116C150.772 37.368 150.861 37.6993 150.861 38.11C150.861 38.7353 150.637 39.23 150.189 39.594C149.75 39.958 149.158 40.14 148.411 40.14ZM154.386 40.14C154.012 40.14 153.658 40.0933 153.322 40C152.995 39.8973 152.692 39.7573 152.412 39.58C152.132 39.3933 151.889 39.174 151.684 38.922L152.496 38.11C152.738 38.4087 153.018 38.6327 153.336 38.782C153.653 38.922 154.008 38.992 154.4 38.992C154.792 38.992 155.095 38.9267 155.31 38.796C155.524 38.656 155.632 38.4647 155.632 38.222C155.632 37.9793 155.543 37.7927 155.366 37.662C155.198 37.522 154.978 37.41 154.708 37.326C154.437 37.2327 154.148 37.144 153.84 37.06C153.541 36.9667 153.256 36.85 152.986 36.71C152.715 36.57 152.491 36.3787 152.314 36.136C152.146 35.8933 152.062 35.5713 152.062 35.17C152.062 34.7687 152.16 34.4233 152.356 34.134C152.552 33.8353 152.822 33.6067 153.168 33.448C153.522 33.2893 153.947 33.21 154.442 33.21C154.964 33.21 155.426 33.3033 155.828 33.49C156.238 33.6673 156.574 33.938 156.836 34.302L156.024 35.114C155.837 34.8713 155.604 34.6847 155.324 34.554C155.053 34.4233 154.745 34.358 154.4 34.358C154.036 34.358 153.756 34.4233 153.56 34.554C153.373 34.6753 153.28 34.848 153.28 35.072C153.28 35.296 153.364 35.4687 153.532 35.59C153.7 35.7113 153.919 35.814 154.19 35.898C154.47 35.982 154.759 36.0707 155.058 36.164C155.356 36.248 155.641 36.3647 155.912 36.514C156.182 36.6633 156.402 36.864 156.57 37.116C156.747 37.368 156.836 37.6993 156.836 38.11C156.836 38.7353 156.612 39.23 156.164 39.594C155.725 39.958 155.132 40.14 154.386 40.14ZM158.26 40V33.35H159.52V40H158.26ZM158.89 32.02C158.657 32.02 158.466 31.9453 158.316 31.796C158.167 31.6373 158.092 31.4413 158.092 31.208C158.092 30.984 158.167 30.7973 158.316 30.648C158.466 30.4893 158.657 30.41 158.89 30.41C159.124 30.41 159.315 30.4893 159.464 30.648C159.614 30.7973 159.688 30.984 159.688 31.208C159.688 31.4413 159.614 31.6373 159.464 31.796C159.315 31.9453 159.124 32.02 158.89 32.02ZM163.491 40.14C163.118 40.14 162.763 40.0933 162.427 40C162.1 39.8973 161.797 39.7573 161.517 39.58C161.237 39.3933 160.994 39.174 160.789 38.922L161.601 38.11C161.844 38.4087 162.124 38.6327 162.441 38.782C162.758 38.922 163.113 38.992 163.505 38.992C163.897 38.992 164.2 38.9267 164.415 38.796C164.63 38.656 164.737 38.4647 164.737 38.222C164.737 37.9793 164.648 37.7927 164.471 37.662C164.303 37.522 164.084 37.41 163.813 37.326C163.542 37.2327 163.253 37.144 162.945 37.06C162.646 36.9667 162.362 36.85 162.091 36.71C161.82 36.57 161.596 36.3787 161.419 36.136C161.251 35.8933 161.167 35.5713 161.167 35.17C161.167 34.7687 161.265 34.4233 161.461 34.134C161.657 33.8353 161.928 33.6067 162.273 33.448C162.628 33.2893 163.052 33.21 163.547 33.21C164.07 33.21 164.532 33.3033 164.933 33.49C165.344 33.6673 165.68 33.938 165.941 34.302L165.129 35.114C164.942 34.8713 164.709 34.6847 164.429 34.554C164.158 34.4233 163.85 34.358 163.505 34.358C163.141 34.358 162.861 34.4233 162.665 34.554C162.478 34.6753 162.385 34.848 162.385 35.072C162.385 35.296 162.469 35.4687 162.637 35.59C162.805 35.7113 163.024 35.814 163.295 35.898C163.575 35.982 163.864 36.0707 164.163 36.164C164.462 36.248 164.746 36.3647 165.017 36.514C165.288 36.6633 165.507 36.864 165.675 37.116C165.852 37.368 165.941 37.6993 165.941 38.11C165.941 38.7353 165.717 39.23 165.269 39.594C164.83 39.958 164.238 40.14 163.491 40.14ZM168.374 40V30.564H169.634V40H168.374ZM166.736 34.498V33.35H171.272V34.498H166.736ZM175.129 40.14C174.522 40.14 173.972 39.9907 173.477 39.692C172.982 39.384 172.59 38.9687 172.301 38.446C172.021 37.9233 171.881 37.3353 171.881 36.682C171.881 36.0287 172.021 35.4407 172.301 34.918C172.59 34.3953 172.978 33.98 173.463 33.672C173.958 33.364 174.513 33.21 175.129 33.21C175.633 33.21 176.081 33.3173 176.473 33.532C176.874 33.7373 177.196 34.0267 177.439 34.4C177.682 34.764 177.817 35.1887 177.845 35.674V37.676C177.817 38.152 177.682 38.5767 177.439 38.95C177.206 39.3233 176.888 39.6173 176.487 39.832C176.095 40.0373 175.642 40.14 175.129 40.14ZM175.339 38.95C175.964 38.95 176.468 38.74 176.851 38.32C177.234 37.8907 177.425 37.3447 177.425 36.682C177.425 36.2247 177.336 35.828 177.159 35.492C176.991 35.1467 176.748 34.8807 176.431 34.694C176.114 34.498 175.745 34.4 175.325 34.4C174.905 34.4 174.532 34.498 174.205 34.694C173.888 34.89 173.636 35.1607 173.449 35.506C173.272 35.842 173.183 36.2293 173.183 36.668C173.183 37.116 173.272 37.5127 173.449 37.858C173.636 38.194 173.892 38.46 174.219 38.656C174.546 38.852 174.919 38.95 175.339 38.95ZM177.341 40V38.208L177.579 36.584L177.341 34.974V33.35H178.615V40H177.341ZM185.153 40V36.122C185.153 35.618 184.995 35.2027 184.677 34.876C184.36 34.5493 183.949 34.386 183.445 34.386C183.109 34.386 182.811 34.4607 182.549 34.61C182.288 34.7593 182.083 34.9647 181.933 35.226C181.784 35.4873 181.709 35.786 181.709 36.122L181.191 35.828C181.191 35.324 181.303 34.876 181.527 34.484C181.751 34.092 182.064 33.784 182.465 33.56C182.867 33.3267 183.319 33.21 183.823 33.21C184.327 33.21 184.771 33.336 185.153 33.588C185.545 33.84 185.853 34.1713 186.077 34.582C186.301 34.9833 186.413 35.4127 186.413 35.87V40H185.153ZM180.449 40V33.35H181.709V40H180.449ZM189.059 40V30.564H190.319V40H189.059ZM187.421 34.498V33.35H191.957V34.498H187.421Z" fill="#E6CCFF"/>
<rect x="0.796875" y="0.373047" width="44.8326" height="44.8326" rx="12" fill="url(#paint0_linear_8961_4661)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M17.9364 32.186L26.9013 23.2179C28.3149 21.8038 28.3116 19.5106 26.8939 18.1005C25.4822 16.6964 23.2007 16.6985 21.7917 18.1054L12.8182 27.0648C11.4025 28.4783 11.4016 30.772 12.8162 32.1865C14.2302 33.6005 16.5227 33.6003 17.9364 32.186ZM21.7793 20.6608L24.3404 23.2219L25.621 21.9413C26.3282 21.2341 26.3282 20.0874 25.621 19.3802C24.9137 18.673 23.7671 18.673 23.0599 19.3802L21.7793 20.6608Z" fill="white"/>
<path d="M16.3479 12.8463C16.4329 12.5304 16.8811 12.5304 16.9661 12.8463L17.424 14.5469C17.4537 14.6571 17.5398 14.7431 17.6499 14.7728L19.3506 15.2307C19.6664 15.3157 19.6664 15.7639 19.3506 15.849L17.6499 16.3068C17.5398 16.3365 17.4537 16.4226 17.424 16.5327L16.9661 18.2334C16.8811 18.5493 16.4329 18.5493 16.3479 18.2334L15.89 16.5327C15.8603 16.4226 15.7743 16.3365 15.6641 16.3068L13.9635 15.849C13.6476 15.7639 13.6476 15.3157 13.9635 15.2307L15.6641 14.7728C15.7743 14.7431 15.8603 14.6571 15.89 14.5469L16.3479 12.8463Z" fill="white"/>
<path d="M29.1545 11.567C29.2396 11.2511 29.6878 11.2511 29.7728 11.567L30.2307 13.2676C30.2603 13.3778 30.3465 13.4638 30.4566 13.4935L32.1572 13.9514C32.4731 14.0364 32.4731 14.4846 32.1572 14.5697L30.4566 15.0275C30.3465 15.0572 30.2603 15.1433 30.2307 15.2535L29.7728 16.9541C29.6878 17.27 29.2396 17.27 29.1545 16.9541L28.6966 15.2535C28.667 15.1433 28.581 15.0572 28.4707 15.0275L26.7701 14.5697C26.4542 14.4846 26.4542 14.0364 26.7701 13.9514L28.4707 13.4935C28.581 13.4638 28.667 13.3778 28.6966 13.2676L29.1545 11.567Z" fill="white"/>
<path d="M30.4338 23.0944C30.5189 22.7784 30.9671 22.7784 31.0521 23.0944L31.51 24.7949C31.5396 24.9052 31.6258 24.9912 31.7359 25.0208L33.4365 25.4788C33.7524 25.5638 33.7524 26.012 33.4365 26.097L31.7359 26.5549C31.6258 26.5845 31.5396 26.6706 31.51 26.7808L31.0521 28.4814C30.9671 28.7973 30.5189 28.7973 30.4338 28.4814L29.9759 26.7808C29.9463 26.6706 29.8603 26.5845 29.75 26.5549L28.0494 26.097C27.7335 26.012 27.7335 25.5638 28.0494 25.4788L29.75 25.0208C29.8603 24.9912 29.9463 24.9052 29.9759 24.7949L30.4338 23.0944Z" fill="white"/>
<defs>
<linearGradient id="paint0_linear_8961_4661" x1="51.6072" y1="16.8117" x2="-2.19197" y2="27.2726" gradientUnits="userSpaceOnUse">
<stop stop-color="#4080F6"/>
<stop offset="1" stop-color="#A356F7"/>
</linearGradient>
</defs>
</svg>
</file>

<file path="src/assets/logo.svg">
<svg width="46" height="46" viewBox="0 0 46 46" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="0.796875" y="0.373047" width="44.8326" height="44.8326" rx="12" fill="url(#paint0_linear_8908_4950)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M17.9364 32.186L26.9013 23.2179C28.3149 21.8038 28.3116 19.5106 26.8939 18.1005C25.4822 16.6964 23.2007 16.6985 21.7917 18.1054L12.8182 27.0648C11.4025 28.4783 11.4016 30.772 12.8162 32.1865C14.2302 33.6005 16.5227 33.6003 17.9364 32.186ZM21.7793 20.6608L24.3404 23.2219L25.621 21.9413C26.3282 21.2341 26.3282 20.0874 25.621 19.3802C24.9137 18.673 23.7671 18.673 23.0599 19.3802L21.7793 20.6608Z" fill="white"/>
<path d="M16.3479 12.8463C16.4329 12.5304 16.8811 12.5304 16.9661 12.8463L17.424 14.5469C17.4537 14.6571 17.5398 14.7431 17.6499 14.7728L19.3506 15.2307C19.6664 15.3157 19.6664 15.7639 19.3506 15.849L17.6499 16.3068C17.5398 16.3365 17.4537 16.4226 17.424 16.5327L16.9661 18.2334C16.8811 18.5493 16.4329 18.5493 16.3479 18.2334L15.89 16.5327C15.8603 16.4226 15.7743 16.3365 15.6641 16.3068L13.9635 15.849C13.6476 15.7639 13.6476 15.3157 13.9635 15.2307L15.6641 14.7728C15.7743 14.7431 15.8603 14.6571 15.89 14.5469L16.3479 12.8463Z" fill="white"/>
<path d="M29.1545 11.567C29.2396 11.2511 29.6878 11.2511 29.7728 11.567L30.2307 13.2676C30.2603 13.3778 30.3465 13.4638 30.4566 13.4935L32.1572 13.9514C32.4731 14.0364 32.4731 14.4846 32.1572 14.5697L30.4566 15.0275C30.3465 15.0572 30.2603 15.1433 30.2307 15.2535L29.7728 16.9541C29.6878 17.27 29.2396 17.27 29.1545 16.9541L28.6966 15.2535C28.667 15.1433 28.581 15.0572 28.4707 15.0275L26.7701 14.5697C26.4542 14.4846 26.4542 14.0364 26.7701 13.9514L28.4707 13.4935C28.581 13.4638 28.667 13.3778 28.6966 13.2676L29.1545 11.567Z" fill="white"/>
<path d="M30.4338 23.0944C30.5189 22.7784 30.9671 22.7784 31.0521 23.0944L31.51 24.7949C31.5396 24.9052 31.6258 24.9912 31.7359 25.0208L33.4365 25.4788C33.7524 25.5638 33.7524 26.012 33.4365 26.097L31.7359 26.5549C31.6258 26.5845 31.5396 26.6706 31.51 26.7808L31.0521 28.4814C30.9671 28.7973 30.5189 28.7973 30.4338 28.4814L29.9759 26.7808C29.9463 26.6706 29.8603 26.5845 29.75 26.5549L28.0494 26.097C27.7335 26.012 27.7335 25.5638 28.0494 25.4788L29.75 25.0208C29.8603 24.9912 29.9463 24.9052 29.9759 24.7949L30.4338 23.0944Z" fill="white"/>
<defs>
<linearGradient id="paint0_linear_8908_4950" x1="51.6072" y1="16.8117" x2="-2.19197" y2="27.2726" gradientUnits="userSpaceOnUse">
<stop stop-color="#4080F6"/>
<stop offset="1" stop-color="#A356F7"/>
</linearGradient>
</defs>
</svg>
</file>

<file path="src/assets/logout_icon.svg">
<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M15 12L2 12M2 12L5.5 9M2 12L5.5 15" stroke="#f5f5f5" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M9.00195 7C9.01406 4.82497 9.11051 3.64706 9.87889 2.87868C10.7576 2 12.1718 2 15.0002 2L16.0002 2C18.8286 2 20.2429 2 21.1215 2.87868C22.0002 3.75736 22.0002 5.17157 22.0002 8L22.0002 16C22.0002 18.8284 22.0002 20.2426 21.1215 21.1213C20.3531 21.8897 19.1752 21.9862 17 21.9983M9.00195 17C9.01406 19.175 9.11051 20.3529 9.87889 21.1213C10.5202 21.7626 11.4467 21.9359 13 21.9827" stroke="#f5f5f5" stroke-width="1.5" stroke-linecap="round"></path> </g></svg>
</file>

<file path="src/assets/menu_icon.svg">
<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g id="Menu / Menu_Alt_03"> <path id="Vector" d="M5 17H13M5 12H19M5 7H13" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g> </g></svg>
</file>

<file path="src/assets/prism.css">
pre[class*="language-"],
code[class*="language-"] {
	color: #d4d4d4;
	font-size: 13px !important;
	text-shadow: none;
	font-family: Menlo, Monaco, Consolas, "Andale Mono", "Ubuntu Mono", "Courier New", monospace;
	direction: ltr;
	text-align: left;
	white-space: pre-wrap;
	word-spacing: normal;
	word-break: normal;
	line-height: 1.5;
	-moz-tab-size: 4;
	-o-tab-size: 4;
	tab-size: 4;
	-webkit-hyphens: none;
	-moz-hyphens: none;
	-ms-hyphens: none;
	hyphens: none;
	width:100%;
	max-width: 60vw;
	border-radius: 10px !important;
}

pre[class*="language-"]::selection,
code[class*="language-"]::selection,
pre[class*="language-"] *::selection,
code[class*="language-"] *::selection {
	text-shadow: none;
	background: #264F78;
}

@media print {
	pre[class*="language-"],
	code[class*="language-"] {
		text-shadow: none;
	}
}

pre[class*="language-"] {
	padding: 1em;
	margin: .5em 0;
	overflow: auto;
	background: #1e1e1e;
}

:not(pre) > code[class*="language-"] {
	padding: .1em .3em;
	border-radius: .3em;
	color: #db4c69;
	background: #1e1e1e;
}
/*********************************************************
* Tokens
*/
.namespace {
	opacity: .7;
}

.token.doctype .token.doctype-tag {
	color: #569CD6;
}

.token.doctype .token.name {
	color: #9cdcfe;
}

.token.comment,
.token.prolog {
	color: #6a9955;
}

.token.punctuation,
.language-html .language-css .token.punctuation,
.language-html .language-javascript .token.punctuation {
	color: #d4d4d4;
}

.token.property,
.token.tag,
.token.boolean,
.token.number,
.token.constant,
.token.symbol,
.token.inserted,
.token.unit {
	color: #b5cea8;
}

.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.deleted {
	color: #ce9178;
}

.language-css .token.string.url {
	text-decoration: underline;
}

.token.operator,
.token.entity {
	color: #d4d4d4;
}

.token.operator.arrow {
	color: #569CD6;
}

.token.atrule {
	color: #ce9178;
}

.token.atrule .token.rule {
	color: #c586c0;
}

.token.atrule .token.url {
	color: #9cdcfe;
}

.token.atrule .token.url .token.function {
	color: #dcdcaa;
}

.token.atrule .token.url .token.punctuation {
	color: #d4d4d4;
}

.token.keyword {
	color: #569CD6;
}

.token.keyword.module,
.token.keyword.control-flow {
	color: #c586c0;
}

.token.function,
.token.function .token.maybe-class-name {
	color: #dcdcaa;
}

.token.regex {
	color: #d16969;
}

.token.important {
	color: #569cd6;
}

.token.italic {
	font-style: italic;
}

.token.constant {
	color: #9cdcfe;
}

.token.class-name,
.token.maybe-class-name {
	color: #4ec9b0;
}

.token.console {
	color: #9cdcfe;
}

.token.parameter {
	color: #9cdcfe;
}

.token.interpolation {
	color: #9cdcfe;
}

.token.punctuation.interpolation-punctuation {
	color: #569cd6;
}

.token.boolean {
	color: #569cd6;
}

.token.property,
.token.variable,
.token.imports .token.maybe-class-name,
.token.exports .token.maybe-class-name {
	color: #9cdcfe;
}

.token.selector {
	color: #d7ba7d;
}

.token.escape {
	color: #d7ba7d;
}

.token.tag {
	color: #569cd6;
}

.token.tag .token.punctuation {
	color: #808080;
}

.token.cdata {
	color: #808080;
}

.token.attr-name {
	color: #9cdcfe;
}

.token.attr-value,
.token.attr-value .token.punctuation {
	color: #ce9178;
}

.token.attr-value .token.punctuation.attr-equals {
	color: #d4d4d4;
}

.token.entity {
	color: #569cd6;
}

.token.namespace {
	color: #4ec9b0;
}
/*********************************************************
* Language Specific
*/

pre[class*="language-javascript"],
code[class*="language-javascript"],
pre[class*="language-jsx"],
code[class*="language-jsx"],
pre[class*="language-typescript"],
code[class*="language-typescript"],
pre[class*="language-tsx"],
code[class*="language-tsx"] {
	color: #9cdcfe;
}

pre[class*="language-css"],
code[class*="language-css"] {
	color: #ce9178;
}

pre[class*="language-html"],
code[class*="language-html"] {
	color: #d4d4d4;
}

.language-regex .token.anchor {
	color: #dcdcaa;
}

.language-html .token.punctuation {
	color: #808080;
}
/*********************************************************
* Line highlighting
*/
pre[class*="language-"] > code[class*="language-"] {
	position: relative;
	z-index: 1;
}

.line-highlight.line-highlight {
	background: #f7ebc6;
	box-shadow: inset 5px 0 0 #f7d87c;
	z-index: 0;
}
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/assets/search_icon.svg">
<svg width="13" height="13" viewBox="0 0 13 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9.27539 9.30664L11.7108 11.742" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M10.4936 5.65205C10.4936 8.34214 8.31284 10.5229 5.62276 10.5229C2.93268 10.5229 0.751953 8.34214 0.751953 5.65205C0.751953 2.96198 2.93268 0.78125 5.62276 0.78125C8.31284 0.78125 10.4936 2.96198 10.4936 5.65205Z" stroke="white"/>
</svg>
</file>

<file path="src/assets/send_icon.svg">
<svg width="38" height="38" viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="18.7593" cy="18.6597" r="18.4312" fill="url(#paint0_linear_8908_4933)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M13.8183 19.567C13.4158 20.9307 12.1432 25.2658 12.1432 25.2658C12.1432 25.2658 28.7795 19.9602 29.0493 19.8702L29.0889 19.8451L13.8183 19.567ZM12.5029 13.3956C12.5029 13.3956 13.5521 17.5965 13.851 18.7703L29.0493 19.1508C27.7335 18.694 12.5029 13.3956 12.5029 13.3956Z" fill="white"/>
<defs>
<linearGradient id="paint0_linear_8908_4933" x1="18.7593" y1="0.228516" x2="18.7593" y2="37.0909" gradientUnits="userSpaceOnUse">
<stop stop-color="#BD53FF"/>
<stop offset="1" stop-color="#7D36FE"/>
</linearGradient>
</defs>
</svg>
</file>

<file path="src/assets/stop_icon.svg">
<svg width="37" height="37" viewBox="0 0 37 37" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="18.4312" cy="18.4312" r="18.4312" fill="url(#paint0_linear_8956_4667)"/>
<rect x="12" y="12" width="13" height="13" rx="3" fill="white"/>
<defs>
<linearGradient id="paint0_linear_8956_4667" x1="18.4312" y1="0" x2="18.4312" y2="36.8624" gradientUnits="userSpaceOnUse">
<stop stop-color="#C263FE"/>
<stop offset="1" stop-color="#7D36FE"/>
</linearGradient>
</defs>
</svg>
</file>

<file path="src/assets/theme_icon.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9.2489 1.39807V3.0509C9.2489 3.6159 8.98696 3.88769 8.44142 3.88769C7.89589 3.88769 7.63395 3.6159 7.63395 3.0509V1.39807C7.63395 0.853821 7.89589 0.582031 8.44142 0.582031C8.98696 0.582031 9.2489 0.853821 9.2489 1.39807ZM10.8862 3.57373L11.8907 2.21411C12.2183 1.79571 12.6332 1.71204 13.0474 2.00458C13.4616 2.29712 13.5056 2.67401 13.1787 3.13458L12.1742 4.47345C11.8466 4.93402 11.4541 4.97552 11.0175 4.68298C10.6026 4.38977 10.5593 4.0343 10.8862 3.5744V3.57373ZM4.9922 2.23486L6.0183 3.57373C6.3459 4.0343 6.3019 4.38977 5.86533 4.68231C5.45042 4.99628 5.05786 4.93335 4.73026 4.47278L3.70415 3.13391C3.37655 2.67334 3.42055 2.31787 3.85712 2.02533C4.27203 1.71137 4.6646 1.77429 4.9922 2.23486ZM8.44142 4.82892C10.319 4.82892 11.8466 6.29364 11.8466 8.09241C11.8466 9.87042 10.3183 11.3144 8.44142 11.3144C6.56454 11.3144 5.0362 9.87109 5.0362 8.09241C5.0362 6.29297 6.56454 4.82892 8.44142 4.82892ZM2.06754 5.28949L3.7265 5.79156C4.27203 5.95892 4.46901 6.27289 4.29439 6.77496C4.14141 7.27704 3.77051 7.42364 3.20262 7.25629L1.58697 6.75421C1.04144 6.58685 0.844458 6.25213 0.997432 5.75006C1.17206 5.26874 1.52201 5.12213 2.06754 5.28949ZM13.178 5.79156L14.8153 5.28949C15.3832 5.12213 15.7324 5.26874 15.8847 5.75006C16.0593 6.25213 15.8631 6.58685 15.2952 6.73346L13.6795 7.25629C13.134 7.42364 12.7847 7.27704 12.6101 6.77496C12.4571 6.27289 12.6318 5.95892 13.178 5.79156ZM8.44142 9.89184C9.48919 9.89184 10.3407 9.07581 10.3407 8.09241C10.3407 7.08826 9.48919 6.27222 8.44142 6.27222C7.39366 6.27222 6.56384 7.08826 6.56384 8.09241C6.56384 9.07581 7.39366 9.89184 8.44142 9.89184ZM1.58697 9.41052L3.22427 8.90845C3.76981 8.74109 4.14141 8.86627 4.29369 9.36902C4.46831 9.87109 4.27203 10.1851 3.7258 10.3524L2.06685 10.8752C1.52131 11.0426 1.17206 10.896 0.997432 10.3939C0.844458 9.89184 1.04144 9.57788 1.58697 9.41052ZM13.6802 8.90845L15.3175 9.41052C15.8631 9.57788 16.06 9.89184 15.8854 10.3939C15.7324 10.896 15.3832 11.0426 14.816 10.8752L13.1787 10.3524C12.6108 10.1851 12.4585 9.87109 12.6108 9.36902C12.7854 8.86694 13.1347 8.74109 13.6802 8.90845ZM3.70485 13.0087L4.73095 11.6906C5.05855 11.23 5.45111 11.1678 5.86603 11.4811C6.3026 11.7743 6.3466 12.1298 6.019 12.5897L4.99289 13.9078C4.66529 14.3683 4.27273 14.452 3.83617 14.1588C3.42125 13.8656 3.37794 13.4693 3.70485 13.0087ZM12.1742 11.6906L13.1787 13.0087C13.5063 13.4693 13.4623 13.8663 13.0474 14.1595C12.6325 14.4527 12.2176 14.3476 11.8907 13.9292L10.8862 12.5903C10.5586 12.1298 10.6026 11.7743 11.0175 11.4817C11.4541 11.1885 11.8473 11.23 12.1742 11.6906ZM9.2489 13.0924V14.7452C9.2489 15.3102 8.98696 15.582 8.44142 15.582C7.89589 15.582 7.63395 15.3102 7.63395 14.7452V13.0924C7.63395 12.5274 7.89589 12.2556 8.44142 12.2556C8.98696 12.2556 9.2489 12.5274 9.2489 13.0924Z" fill="white"/>
</svg>
</file>

<file path="src/assets/user_icon.svg">
<svg width="37" height="37" viewBox="0 0 37 37" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="18.1664" cy="18.685" r="17.433" fill="#50319A" stroke="#6F54B0"/>
<path d="M17.5928 20.1953H18.749C22.0069 20.1954 24.6484 22.8369 24.6484 26.0947C24.6484 26.1376 24.6384 26.1434 24.6436 26.1357C24.6457 26.1326 24.6435 26.1391 24.624 26.1494C24.6035 26.1602 24.5771 26.1676 24.5527 26.1729C24.5372 26.1703 24.5237 26.1654 24.5127 26.1553L24.502 26.1455L24.4902 26.1357L24.4883 26.1338L24.4854 26.1064L24.4844 26.0938V26.0908C24.4824 22.9245 21.9151 20.3584 18.749 20.3584H17.5928C14.4248 20.3584 11.8564 22.9268 11.8564 26.0947C11.8564 26.1325 11.8491 26.1414 11.8516 26.1367C11.8502 26.138 11.8476 26.14 11.8438 26.1426C11.8317 26.1506 11.8124 26.1596 11.7881 26.167C11.7773 26.1703 11.7671 26.1711 11.7588 26.1729C11.7217 26.1651 11.6935 26.1338 11.6934 26.0947L11.6943 26.0811L11.6934 26.0801C11.7011 22.8288 14.3396 20.1953 17.5928 20.1953Z" fill="white" stroke="white"/>
<path d="M18.1631 13.2051C19.4943 13.2051 20.5752 14.286 20.5752 15.6172C20.5752 16.9484 19.4943 18.0293 18.1631 18.0293C16.8319 18.0293 15.751 16.9484 15.751 15.6172C15.751 14.286 16.8319 13.2051 18.1631 13.2051ZM18.1631 13.3682C16.9219 13.3682 15.9141 14.376 15.9141 15.6172C15.9141 16.8584 16.9219 17.8662 18.1631 17.8662C19.4043 17.8662 20.4121 16.8584 20.4121 15.6172C20.4121 14.376 19.4043 13.3682 18.1631 13.3682Z" fill="white" stroke="white"/>
</svg>
</file>

<file path="src/components/ChatBox.jsx">
import React, { useState, useEffect, useRef } from 'react'
import { useAppContext } from '../context/AppContext'
import Message from './Message'
import { assets } from '../assets/assets'
import SendIcon from '../icons/SendIcon'
import toast from 'react-hot-toast'

const ChatBox = () => {
  const { selectedChat, user, chats, setChats, setSelectedChat, axios, token, setUser } = useAppContext()
  const [input, setInput] = useState('')
  const [mode, setMode] = useState('text')
  const [isPublic, setIsPublic] = useState(false)
  const [loading, setLoading] = useState(false)
  const [messages, setMessages] = useState([])
  const containerRef = useRef(null)
  const [prompt, setPromt] = useState('')



  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!user) return toast('Login to send message')
    if (!input.trim()) return
    setLoading(true)
    const inputCopy = input
    setInput('')
    setMessages(prev => [...prev, { role: 'user', content: inputCopy, timestamp: Date.now(), isImage: false }])

    try {
      const { data } = await axios.post(
        `/api/message/${mode}`,
        { chatId: selectedChat._id, prompt: inputCopy, isPublic },
        { headers: { Authorization: token } }
      )
      if (data.success) {
        setMessages(prev => [...prev, data.reply])
        if (mode === 'image') {
          setUser(prev => ({ ...prev, credits: prev.credits - 2 }))
        } else {
          setUser(prev => ({ ...prev, credits: prev.credits - 1 }))
        }
      } else {
        toast.error(data.message)
        setInput(inputCopy)
      }
    } catch (error) {
      toast.error(error.message)
      setInput(inputCopy)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    if (selectedChat) {
      setMessages(selectedChat.messages)
    }
  }, [selectedChat])

  useEffect(() => {
    if (containerRef.current) {
      containerRef.current.scrollTo({
        top: containerRef.current.scrollHeight,
        behavior: 'smooth',
      })
    }
  }, [messages])

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSubmit(e)
    }
  }

  if (!selectedChat) {
    return (
      <div className="flex-1 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-semibold mb-4">Welcome to Chaty</h2>
          <p className="text-gray-500 dark:text-gray-400">
            Select a chat from the sidebar or create a new one to get started
          </p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex-1 flex flex-col justify-between m-5 md:m-10  max-md:mt-14 2xl:pr-40  ">
      <div ref={containerRef}
        className="flex-1 overflow-y-scroll mb-5">
        {selectedChat.messages && selectedChat.messages.length > 0 ? (
          selectedChat.messages.map((message) => (
            <Message key={message.id} message={message} />
          ))
        ) : (
          <div className="flex items-center justify-center h-full">
            <div className="text-center">
              <h3 className="text-xl font-medium mb-2">Ask me anything</h3>
              <p className="text-gray-500 dark:text-gray-400">
                Start a conversation
              </p>
            </div>
          </div>
        )}

        {loading && (
          <div className="flex justify-start">
            <div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-4 max-w-xs">
              <div className="flex space-x-2">
                <div key="dot-1" className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"></div>
                <div key="dot-2" className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                <div key="dot-3" className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              </div>
            </div>
          </div>
        )}
      </div>

      {mode === 'image' && (
        <label className='inline-flex items-center gap-2 mb-3 text-sm mx-auto'>
          <p className='text-xs'>Publish Generated Image to Community</p>
          <input type='checkbox' className='cursor-pointer' checked={isPublic}
            onChange={(e) => setIsPublic(e.target.checked)}></input>
        </label>
      )}
      <form onSubmit={handleSubmit}
        className="bg-primary/20 dark:bg-[#202020]/30 border border-primary dark:border-[#313131]/30 rounded-full w-full max-w-2xl p-3 pl-4 mx-auto flex gap-4 items-center">
        <select onChange={(e) => setMode(e.target.value)} value={mode}
          className='text-sm pl-3 pr-2 outline-none'>
          <option className='dark:bg-[#404040]' value='text'>Text</option>
          <option className='dark:bg-[#404040]' value='image'>Image</option>
        </select>
        <input onChange={(e) => setInput(e.target.value)}
          value={input}
          type='text'
          placeholder='Ask me anything....'
          className='flex-1 w-full text-sm outline-none' required></input>
        <button disabled={loading}>
          <SendIcon className='w-8 cursor-pointer' />
        </button>
      </form>
    </div>
  )
}

export default ChatBox
</file>

<file path="src/components/Message.jsx">
import React, { useEffect } from 'react'
import { assets } from '../assets/assets'
import { useAppContext } from '../context/AppContext'
import moment from 'moment'
import Markdown from 'react-markdown'
import Prism from 'prismjs'
import User from '../icons/User'

const Message = ({ message }) => {
  const { user } = useAppContext()

  useEffect(() => {
    Prism.highlightAll()
  },[message.content])
  return (
    <div>
      {message.role ==="user" ? (
        <div className='flex items-start justify-end my-4 gap-2'>
          <div className='flex flex-col gap-3 p-2 px-4 bg-slate-50 dark:bg-[#303030]/30 border border-[#212121]/30 rounded-md max-w-2xl'>
              <p className='text-sm dark:text-white'>{message.content}</p>
              <span className='text-xs text-gray-400 dark:text-[#313131]'>{moment(message.timestamp).fromNow()}</span>
          </div>
          <User className='w-6 not-dark:invert'/>
        </div>
      )
      :
      (
        <div className='inline-flex flex-col gap-2 p-2 px-4 max-w-2xl bg-primary/20 dark:bg-[#303030]/30 border border-[#212121]/30 rounded-md my-4'>
          {message.isImage ? (
            <img src={message.content} alt=' ' className='w-full max-w-md mt-2 rounded-md'></img>
          ):(
            <div className='te-sm dark:text-white reset-tw'>
              <Markdown>{message.content}</Markdown>
            </div>
          )}
          <span className='text-xs text-gray-400 dark:text-[#313131]'>{moment(message.timestamp).fromNow()}</span>
        </div>
      )}
    </div>
  )
}

export default Message
</file>

<file path="src/components/Sidebar.jsx">
import React, { useState } from 'react'
import { useAppContext } from '../context/AppContext'
import { assets } from '../assets/assets'
import moment from 'moment'
import User from "../icons/User";
import Flame from '../icons/Credits';
import Album from '../icons/Images';
import Delete from '../icons/Delete';
import toast from 'react-hot-toast';

const Sidebar = ({ isMenuOpen, setIsMenuOpen }) => {
  const { chats, setSelectedChat, theme, setTheme, user, navigate, createNewChat, axios, setChats, fetchUsersChats, setToken, token } = useAppContext()

  const [search, setSearch] = useState('')


  const logout = () => {
    localStorage.removeItem('token')
    setToken(null)
    toast.success('Logged out successfully')
  }


  const deleteChat = async (e, chatId) => {
    try {
      e.stopPropagation()
      const confirm = window.confirm('Are you sure want to delete this chat? ')
      if (!confirm) {
        return
      }
      const { data } = await axios.post('api/chat/delete', { chatId }, { headers: { Authorization: token } })
      if (data.success) {
        setChats(prev => prev.filter(chat => chat._id !== chatId))
        await fetchUsersChats()
        toast.success(data.message)
      }
    } catch (error) {
      toast.error(error.message)
    }
  }

  return (
    <div className={`flex flex-col h-screen min-w-72 p-5 dark:bg-gradient-to-b dark:from-[#141414] dark:to-[#000000] border-r border-[#80609f]/30  backdrop-blur-3xl transition-all duration-500 max-md:absolute left-0 z-1 ${!isMenuOpen && 'max-md:-translate-x-full'}`}>
      <a href='/' className='w-auto h-17 max-w-48 object-contain'>
        <img
          src={theme === 'dark' ? assets.my_logo1 : assets.my_logo2}
          alt="Logo"
          className="w-auto h-17 max-w-48 object-contain"
        />
      </a>


      <button onClick={createNewChat} className="flex justify-center items-center w-full py-2 mt-10 bg-[#313131]/30 not-dark:bg-[#141414] text-white rounded-md text-sm cursor-pointer">
        <span className="mr-2 text-xl">+</span>
        New Chat
      </button>

      <div className="flex items-center gap-2 p-3 mt-4 border border-gray-400 dark:border-white/20 rounded-md">
        <img
          src={assets.search_icon}
          alt="Search"
          className={`w-4 ${theme !== 'dark' ? 'invert' : ''}`}
        />
        <input
          type="text"
          placeholder="Search conversations"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="text-sm placeholder:text-gray-400 outline-none"
        />
      </div>

      {chats.length > 0 && (
        <>
          <p className="mt-4 text-sm">Recent Chats</p>
          <div className="flex-1 overflow-y-scroll mt-3 text-sm space-y-3">
            {chats
              .filter(chat =>
                chat.messages[0]?.content.toLowerCase().includes(search.toLowerCase()) ||
                chat.name.toLowerCase().includes(search.toLowerCase())
              )
              .map(chat => (
                <div onClick={() => { navigate('/'); setSelectedChat(chat); setIsMenuOpen(false) }}
                  key={chat._id || chat.id} className="flex justify-between p-2 px-4 dark:bg-[#141414]/10 border border-gray-300 dark:border-white/20 rounded-md group cursor-pointer">
                  <div className="flex-1">
                    <p className="truncate w-full">
                      {chat.messages.length > 0
                        ? chat.messages[0].content.slice(0, 32) + '...'
                        : chat.name
                      }
                    </p>
                    <p className="text-xs text-gray-500 dark:text-[#B1A6C0]">
                      {moment(chat.updatedAt).fromNow()}
                    </p>
                  </div>
                  <Delete onClick={e => toast.promise(deleteChat(e, chat._id), { loading: 'Deleting...' })} className="hidden group-hover:block w-4 cursor-pointer not-dark:invert" />
                </div>
              ))
            }
          </div>
        </>
      )}

      <div
        className="flex items-center gap-2 p-3 mt-4 border border-gray-300 dark:border-white/15 rounded-md cursor-pointer hover:scale-103 transition-all"
        onClick={() => { navigate('/community'); setIsMenuOpen(false) }}
      >
        <Album className="w-4.5 not-dark:invert" />
        <div className="flex flex-col text-sm">
          <p className="text-sm">Community Images</p>
        </div>
      </div>

      <div
        className="flex items-center gap-2 p-3 mt-4 border border-gray-300 dark:border-white/15 rounded-md cursor-pointer hover:scale-103 transition-all"
        onClick={() => { navigate('/credits'); setIsMenuOpen(false) }}
      >
        <Flame className="w-5 invert-0 not-dark:invert" />
        <div className="flex flex-col text-sm">
          <p className="text-sm">Credits: {user?.credits}</p>
          <p className="text-xs text-gray-400">Purchase credits to use Chaty</p>
        </div>
      </div>

      <div className="flex items-center justify-between gap-2 p-3 mt-4 border border-gray-300 dark:border-white/15 rounded-md">
        <div className='flex items-center gap-2 text-sm'>
          <img src={assets.theme_icon} alt='' className="w-4 not-dark:invert" />
          <p>Dark Mode</p>
        </div>
        <label className='relative inline-flex cursor-pointer'>
          <input onChange={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
            type='checkbox' className='sr-only peer' checked={theme === 'dark'} />
          <div className='w-9 h-5 bg-gray-400 rounded-full peer-checked:bg-blue-900 transition-all'></div>
          <span className='absolute left-1 top-1 w-3 h-3 bg-white rounded-full transition-transform peer-checked:translate-x-4'></span>
        </label>
      </div>
      <div
        className="flex items-center gap-3 p-3 mt-4 border border-gray-300 dark:border-white/15 rounded-md cursor-pointer hover:scale-103 transition-all group"
      >
        <User className="w-4 not-dark:invert" />
        <p className='flex-1 text-sm dark:text-white truncate'>{user ? user.name : 'Login your account'}</p>
        {user && <img onClick={logout} src={assets.logout_icon} className='h-5 cursor-pointer hidden not-dark:invert group-hover:block' />}

      </div>
      <img src={assets.close_icon} className='absolute top-3 right-3 w-5 h-5 cursor-pointer md:hidden dark:invert'
        alt=''
        onClick={() => setIsMenuOpen(false)}
      >
      </img>

    </div>
  )
}

export default Sidebar
</file>

<file path="src/context/AppContext.jsx">
import React, { createContext, useContext, useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { assets, dummyUserData, dummyChats } from '../assets/assets'
import axios from 'axios'
import toast from 'react-hot-toast';


axios.defaults.baseURL = import.meta.env.VITE_SERVER_URL;

const AppContext = createContext()

export const AppContextProvider = ({ children }) => {
  const navigate = useNavigate()
  const [user, setUser] = useState(null)
  const [chats, setChats] = useState([])
  const [selectedChat, setSelectedChat] = useState(null)
  const [theme, setTheme] = useState(localStorage.getItem('theme') || 'light')
  const [token, setToken] = useState(localStorage.getItem('token') || null)
  const [loadingUser,setLoadingUser] = useState(true)

  const fetchUser = async () => {
    try {
      const {data} = await axios.get('/api/user/data', {headers: {Authorization: token}})
      if(data.success){
        setUser(data.user)
      }else{
        toast.error(data.message)
      }
    } catch (error) {
      toast.error(error.message)
    }finally{
      setLoadingUser(false)
    }
  }

  const createNewChat = async () => {
    try {
        if(!user) return toast('Login to create a new chat')
        navigate('/')
        await axios.get('/api/chat/create', {headers: {Authorization: token}})
        await fetchUsersChats()
    } catch (error) {
        toast.error(error.message)
    }
}


const fetchUsersChats = async () => {
  try {
      const {data} = await axios.get('/api/chat/get', { headers: { Authorization: token } })
      if(data.success){
          setChats(data.chats)

          if(data.chats.length === 0){
              await createNewChat();
              return fetchUsersChats()
          }else{
              setSelectedChat(data.chats[0])
          }
      }else{
        toast.error(data.message)
      }
  } catch (error) {
    toast.error(error.message)
  }
}


  useEffect(() => {
    if(token){
      fetchUser()
    }else{
      setUser(null)
      setLoadingUser(false)
    }
    
  }, [token])

  useEffect(() => {
    if (user) {
      fetchUsersChats()
    } else {
      setChats([])
      setSelectedChat(null)
    }
  }, [user])

  useEffect(() => {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
    localStorage.setItem('theme',theme)
  }, [theme])

  const value = {
    navigate,
    user,
    setUser,
    fetchUser,
    chats,
    setChats,
    selectedChat,
    setSelectedChat,
    theme,
    setTheme,
    createNewChat,
    loadingUser,
    fetchUsersChats,
    token,
    setToken,
    axios
  }

  return (
    <AppContext.Provider value={value}>
      {children}
    </AppContext.Provider>
  )
}

export const useAppContext = () => {
  return useContext(AppContext)
}
</file>

<file path="src/icons/AiIcon.jsx">
"use client";

import { motion, useAnimation } from "framer-motion";

const antennaeVariants = {
  normal: { pathLength: 1 },
  animate: {
    pathLength: [1, 0.5, 1],
    transition: {
      duration: 0.8,
      ease: "easeInOut",
      repeat: Infinity,
      repeatType: "reverse",
    },
  },
};

const bodyVariants = {
  normal: { y: 0 },
  animate: {
    y: [-1, 1, -1],
    transition: {
      duration: 1,
      ease: "easeInOut",
      repeat: Infinity,
    },
  },
};

const aiIcon = ({
  width = 28,
  height = 28,
  strokeWidth = 2,
  stroke = "#ffffff",
  ...props
}) => {
  const controls = useAnimation();

  return (
    <div
      style={{
        cursor: "pointer",
        userSelect: "none",
        padding: "8px",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
      }}
      onMouseEnter={() => controls.start("animate")}
      onMouseLeave={() => controls.start("normal")}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width={width}
        height={height}
        viewBox="0 0 24 24"
        fill="none"
        stroke={stroke}
        strokeWidth={strokeWidth}
        strokeLinecap="round"
        strokeLinejoin="round"
        {...props}
      >
        <motion.g
          variants={antennaeVariants}
          animate={controls}
          initial="normal"
        >
          <path d="m8 2 1.88 1.88" />
          <path d="M14.12 3.88 16 2" />
        </motion.g>
        <motion.g variants={bodyVariants} animate={controls} initial="normal">
          <path d="M9 7.13v-1a3.003 3.003 0 1 1 6 0v1" />
          <path d="M12 20c-3.3 0-6-2.7-6-6v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v3c0 3.3-2.7 6-6 6" />
          <path d="M12 20v-9" />
          <path d="M6.53 9C4.6 8.8 3 7.1 3 5" />
          <path d="M6 13H2" />
          <path d="M3 21c0-2.1 1.7-3.9 3.8-4" />
          <path d="M20.97 5c0 2.1-1.6 3.8-3.5 4" />
          <path d="M22 13h-4" />
          <path d="M17.2 17c2.1.1 3.8 1.9 3.8 4" />
        </motion.g>
      </svg>
    </div>
  );
};

export { aiIcon };
</file>

<file path="src/icons/Credits.jsx">
import React from 'react';
import { motion, useAnimation } from 'framer-motion';

const pathVariants = {
  normal: {
    pathLength: 1,
    opacity: 1,
    pathOffset: 0,
  },
  animate: {
    opacity: [0, 1],
    pathLength: [0, 1],
    transition: {
      delay: 0.1,
      duration: 0.4,
      opacity: { duration: 0.1, delay: 0.1 },
    },
  },
};

const Flame = ({
  width = 28,
  height = 28,
  strokeWidth = 2,
  stroke = '#ffffff',
  ...props
}) => {
  const controls = useAnimation();

  return (
    <div
      style={{
        cursor: 'pointer',
        userSelect: 'none',
        padding: '8px',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
      }}
      onMouseEnter={() => controls.start('animate')}
      onMouseLeave={() => controls.start('normal')}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width={width}
        height={height}
        viewBox="0 0 24 24"
        fill="none"
        stroke={stroke}
        strokeWidth={strokeWidth}
        strokeLinecap="round"
        strokeLinejoin="round"
        {...props}
      >
        <motion.path
          variants={pathVariants}
          initial="normal"
          animate={controls}
          fill="none"
          d="M8.9 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"
        />
      </svg>
    </div>
  );
};

export default Flame;
</file>

<file path="src/icons/Delete.jsx">
import React from 'react';
import { motion, useAnimation } from 'framer-motion';

const lidVariants = {
  normal: { y: 0 },
  animate: { y: -1.1 },
};

const springTransition = {
  type: 'spring',
  stiffness: 500,
  damping: 30,
};

const Delete = ({
  width = 28,
  height = 28,
  strokeWidth = 2,
  stroke = '#ffffff',
  ...props
}) => {
  const controls = useAnimation();

  return (
    <div
      style={{
        cursor: 'pointer',
        userSelect: 'none',
        padding: '8px',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
      }}
      onMouseEnter={() => controls.start('animate')}
      onMouseLeave={() => controls.start('normal')}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width={width}
        height={height}
        viewBox="0 0 24 24"
        fill="none"
        stroke={stroke}
        strokeWidth={strokeWidth}
        strokeLinecap="round"
        strokeLinejoin="round"
        {...props}
      >
        <motion.g
          variants={lidVariants}
          animate={controls}
          transition={springTransition}
        >
          <path d="M3 6h18" />
          <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
        </motion.g>
        <motion.path
          d="M19 8v12c0 1-1 2-2 2H7c-1 0-2-1-2-2V8"
          variants={{
            normal: { d: "M19 8v12c0 1-1 2-2 2H7c-1 0-2-1-2-2V8" },
            animate: { d: "M19 9v12c0 1-1 2-2 2H7c-1 0-2-1-2-2V9" },
          }}
          animate={controls}
          transition={springTransition}
        />
        <motion.line
          x1="10"
          x2="10"
          y1="11"
          y2="17"
          variants={{
            normal: { y1: 11, y2: 17 },
            animate: { y1: 11.5, y2: 17.5 },
          }}
          animate={controls}
          transition={springTransition}
        />
        <motion.line
          x1="14"
          x2="14"
          y1="11"
          y2="17"
          variants={{
            normal: { y1: 11, y2: 17 },
            animate: { y1: 11.5, y2: 17.5 },
          }}
          animate={controls}
          transition={springTransition}
        />
      </svg>
    </div>
  );
};

export default Delete;
</file>

<file path="src/icons/Images.jsx">
import React from 'react';
import { motion, useAnimation } from 'framer-motion';

const bookmarkVariants = {
  normal: {
    scaleY: 1,
    originY: 0,
  },
  animate: {
    scaleY: [1.2, 0.8, 1],
    transition: {
      duration: 0.6,
      times: [0.4, 0.7, 1],
      type: 'spring',
      stiffness: 300,
      damping: 10,
    },
  },
};

const Album = ({
  width = 28,
  height = 28,
  strokeWidth = 2,
  stroke = '#ffffff',
  ...props
}) => {
  const controls = useAnimation();

  return (
    <div
      style={{
        cursor: 'pointer',
        userSelect: 'none',
        padding: '8px',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
      }}
      onMouseEnter={() => controls.start('animate')}
      onMouseLeave={() => controls.start('normal')}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width={width}
        height={height}
        viewBox="0 0 24 24"
        fill="none"
        stroke={stroke}
        strokeWidth={strokeWidth}
        strokeLinecap="round"
        strokeLinejoin="round"
        {...props}
      >
        <rect width="18" height="18" x="3" y="3" rx="2" ry="2" />
        <motion.path
          d="M11 3 L11 11 L14 8 L17 11 L17 3"
          variants={bookmarkVariants}
          animate={controls}
          initial="normal"
        />
      </svg>
    </div>
  );
};

export default Album;
</file>

<file path="src/icons/LogoIcon.jsx">
"use client";

import { motion, useAnimation } from "framer-motion";

const defaultTransition = {
  type: "spring",
  stiffness: 250,
  damping: 25,
};

const LogoIcon = ({
  width = 28,
  height = 28,
  strokeWidth = 2,
  stroke = "#ffffff",
  ...props
}) => {
  const controls = useAnimation();

  return (
    <div
      style={{
        cursor: "pointer",
        userSelect: "none",
        padding: "8px",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
      }}
      onMouseEnter={() => controls.start("animate")}
      onMouseLeave={() => controls.start("normal")}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        stroke={stroke}
        strokeWidth={strokeWidth}
        viewBox="0 0 24 24"
        fill="none"
        width={width}
        height={height}
        strokeLinecap="round"
        strokeLinejoin="round"
        {...props}
      >
        <motion.path
          variants={{
            normal: { translateX: "0%" },
            animate: { translateX: "2px" },
          }}
          transition={defaultTransition}
          animate={controls}
          initial="normal"
          d="m17 18-6-6 6-6"
        />
        <motion.path
          variants={{
            normal: { translateX: "0%" },
            animate: { translateX: "-2px" },
          }}
          transition={defaultTransition}
          animate={controls}
          initial="normal"
          d="M7 6v12"
        />
      </svg>
    </div>
  );
};

export default  LogoIcon;
</file>

<file path="src/icons/SendIcon.jsx">
import React from 'react';
import { motion, useAnimation } from 'motion/react';

const chevronVariants = {
  normal: {
    x: 0,
    opacity: 1,
  },
  animate: {
    x: [4, 0],
    opacity: [0.3, 1],
    transition: {
      duration: 0.5,
      ease: "easeOut",
    },
  },
};

const SendIcon = ({
  width = 28,
  height = 28,
  strokeWidth = 2,
  stroke = '#ffffff',
  ...props
}) => {
  const controls = useAnimation();

  return (
    <div
      style={{
        cursor: 'pointer',
        userSelect: 'none',
        padding: '8px',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
      }}
      onMouseEnter={() => controls.start('animate')}
      onMouseLeave={() => controls.start('normal')}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width={width}
        height={height}
        viewBox="0 0 24 24"
        fill="none"
        stroke={stroke}
        strokeWidth={strokeWidth}
        strokeLinecap="round"
        strokeLinejoin="round"
        {...props}
      >
        <motion.path
          d="m9 18 6-6-6-6"
          variants={chevronVariants}
          animate={controls}
          initial="normal"
        />
      </svg>
    </div>
  );
};

export default SendIcon;
</file>

<file path="src/icons/User.jsx">
import React from 'react';
import { motion, useAnimation } from 'framer-motion';

const pathVariant = {
  normal: { pathLength: 1, opacity: 1, pathOffset: 0 },
  animate: {
    pathLength: [0, 1],
    opacity: [0, 1],
    pathOffset: [1, 0],
  },
};

const circleVariant = {
  normal: {
    pathLength: 1,
    pathOffset: 0,
    scale: 1,
  },
  animate: {
    pathLength: [0, 1],
    pathOffset: [1, 0],
    scale: [0.5, 1],
  },
};

const User = ({
  width = 28,
  height = 28,
  strokeWidth = 2,
  stroke = '#ffffff',
  ...props
}) => {
  const controls = useAnimation();

  return (
    <div
      style={{
        cursor: 'pointer',
        userSelect: 'none',
        padding: '8px',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
      }}
      onMouseEnter={() => controls.start('animate')}
      onMouseLeave={() => controls.start('normal')}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width={width}
        height={height}
        viewBox="0 0 24 24"
        fill="none"
        stroke={stroke}
        strokeWidth={strokeWidth}
        strokeLinecap="round"
        strokeLinejoin="round"
        {...props}
      >
        <motion.circle
          cx="12"
          cy="8"
          r="5"
          animate={controls}
          variants={circleVariant}
        />
        <motion.path
          d="M20 21a8 8 0 0 0-16 0"
          variants={pathVariant}
          transition={{
            delay: 0.2,
            duration: 0.4,
          }}
          animate={controls}
        />
      </svg>
    </div>
  );
};

export default User;
</file>

<file path="src/index.css">
@import url('https://fonts.googleapis.com/css2?family=Outfit:wght@100..900&display=swap');
@import "tailwindcss";

@custom-variant dark (&:where(.dark,.dark *));
*{
  font-family: "Outfit", sans-serif;
}
@theme{
  --color-primary: #141414;
}
::-webkit-scrollbar{
  display: none;
}

@variants dark {
  .dark * {
    /* Dark mode styles */
  }
}
.reset-tw:not(pre):not(code){
  all:revert;
}
.logo-container {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 8px 12px;
  border-radius: 8px;
  backdrop-filter: blur(10px);
}
</file>

<file path="src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'
import { BrowserRouter } from 'react-router-dom'
import { AppContextProvider } from './context/AppContext.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <BrowserRouter>
    <AppContextProvider>
      <App />
    </AppContextProvider>
  </BrowserRouter>
)
</file>

<file path="src/pages/Community.jsx">
import React, { useState, useEffect } from 'react'
import { useAppContext } from '../context/AppContext'
import { assets, dummyPublishedImages } from '../assets/assets'
import Loading from './Loading'

const Community = () => {
  const { user } = useAppContext()
  const [images, setImages] = useState([])
  const [loading,setLoading] = useState(true)
  const {axios} = useAppContext()


 const fetchImages = async () => {
  try {
    const { data } = await axios.get('/api/user/published-images')
    if (data.success) {
      setImages(data.images)
    } else {
      toast.error(data.message)
    }
  } catch (error) {
    toast.error(error.message)
  }
  setLoading(false)
}


  useEffect(() =>{
    fetchImages()
  },[])

  if(loading) return <Loading/>
  return (
    <div className="p-6 pt-12 xl:px-12 2xl:px-20 w-full mx-auto h-full overflow-y-scroll">
      <div className="max-w-6xl mx-auto">
        <h2 className="text-xl font-semibold mb-6 text-gray-800 dark:text-white">
          Community Images
        </h2>
        {images.length > 0 ? (
          <div className='flex flex-wrap max-sm:justify-center gap-5'>
            {images.map((item,index) =>(
              <a key={index} href={item.imageUrl} target = '_blank' className='relative group block rounded-lg overflow-hidden border border-gray-200 dark:border-gray-300 shadow-sm hover:shadow-md transition-shadow duration-300'>
                <img src={item.imageUrl} alt=''
                     className='w-full h-40 md:h-50 2xl:h-62 object-cover group-hover:scale-105 transition-transform duration-300 ease-in-out'></img>
                <p className='absolute bottom-0 right-0 text-xs bg-black/50 backdrop-blur text-white px-4 py-1 rounded-tl-xl opacity-0 group-hover:opacity-100 transition duration-300'>Created by {item.userName}</p>
              </a>
            ))}
          </div>
        ) : (
          <p className='text-center text-gray-600 dark:text-white mt-10'>No Images Available</p>
        )}

      </div>
    </div>
  )
}

export default Community
</file>

<file path="src/pages/Credits.jsx">
import React, { useEffect, useState } from 'react'
import { useAppContext } from '../context/AppContext'
import { assets, dummyPlans } from '../assets/assets'
import Loading from './Loading'
import Flame from '../icons/Credits'
import toast from 'react-hot-toast'


const Credits = () => {
  const { user } = useAppContext()
  const [plans, setPlans] = useState([])
  const [loading, setLoading] = useState(true)
  const { axios, token } = useAppContext()



  const fetchPlans = async () => {
    try {
      const { data } = await axios.get('/api/credit/plan', {
        headers: { Authorization: token }
      })
      if (data.success) {
        setPlans(data.plans)
      } else {
        toast.error(data.message || 'Failed to fetch plans.')
      }
    } catch (error) {
      toast.error(error.message)
    }
    setLoading(false)
  }


  const purchasePlan = async (planId) => {
    try {
      const { data } = await axios.post('/api/credit/purchase', { planId }, { headers: { Authorization: token } })
      if (data.success) {
        window.location.href = data.url
      } else {
        toast.error(data.message)
      }
    } catch (error) {
      toast.error(error.message)
    }
  }



  useEffect(() => {
    fetchPlans()
  }, [])


  if (loading) return <Loading />


  const handlePurchase = (plan) => {
    console.log('Purchasing plan:', plan)
    alert(`Purchasing ${plan.name} plan for $${plan.price}`)
  }


  return (
    <div className="flex-1 p-6 bg-white dark:bg-gradient-to-b dark:from-[#141414] dark:to-[#000000]  overflow-y-auto">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold mb-4 text-gray-800 dark:text-white">
            Choose Your Plan
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-400 mb-8">
            Get more credits to unlock the full potential of AI
          </p>


          <div className="inline-flex items-center px-6 py-3 bg-blue-700 dark:bg-blue-800/70 rounded-full">
            <Flame />
            <span className="text-white font-semibold">
              Current Credits: {user?.credits || 0}
            </span>
          </div>
        </div>

        <div className='max-w-7xl h-screen overflow-y-scroll mx-auto px-4 sm:px-6 lg:px-8 py-12'>
          <h2 className='text-3xl font-semibold text-center mb-10 xl:mt-30 text-gray-800 dark:text-white'>Credit Plans</h2>
          <div className='flex flex-wrap justify-center gap-8'>
            {plans.map((plan) => (
              <div key={plan._id} className={`border border-gray-200 dark:bg-[#313131]/40 rounded-lg shadow hover:shadow-lg transition-shadow p-6 min-w-[300px] flex flex-col ${plan._id === "pro" ? "bg-white dark:bg-[#313131]/10" : "bg-white dark:bg-transparent"}`} >
                <div className='flex-1'>
                  <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">{plan.name}</h3>
                </div>
                <p className='text-2xl font-bold text-[#313131]/80 dark:text-white/20 mb-4'>
                  ${plan.price}
                  <span>{' '}/ {plan.credits} credits </span>
                </p>
                <ul className='list-disc list-inside text-sm text-gray-700 dark:text-purple-200 space-y-1'>
                  {plan.features.map((feature, index) => (
                    <li key={index}>{feature}</li>
                  ))}
                </ul>
                <button onClick={()=>toast.promise(purchasePlan(plan._id),{loading: 'Processing..'})} className='mt-6 bg-blue-700 dark:bg-blue-800/70 hover:bg-blue-500 active:bg-blue-800 text-white font-medium py-2 rounded transition-colors cursor-pointer '>Buy Now</button>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  )
}


export default Credits
</file>

<file path="src/pages/Loading.jsx">
import React, { useEffect } from 'react'
import { assets } from '../assets/assets'
import { useNavigate } from 'react-router-dom'
import { useAppContext } from '../context/AppContext'

const Loading = () => {
  const navigate = useNavigate()
  const {fetchUser} = useAppContext()

  useEffect(()=> {
    const timeout =  setTimeout(()=>{
      fetchUser()
      navigate('/')
    },8000)
    return ()=> clearTimeout(timeout)
  },[])
  return (
    <div className="bg-gradient-to-b from-[#313131] to-[#202020] backdrop-opacity-60 flex items-center justify-center h-screen w-screen text-white text-2xl">
      <div className="text-center">
        <div className="flex justify-center space-x-2 mb-8">
          <div className="w-4 h-4 bg-blue-700/50 rounded-full animate-bounce"></div>
          <div className="w-4 h-4 bg-blue-700/50 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
          <div className="w-4 h-4 bg-blue-700/50 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
        </div>

        <h2 className="text-2xl font-semibold text-gray-800 dark:text-white mb-4">
          Loading
        </h2>
        <p className="text-gray-600 dark:text-gray-400">
          Please wait a while...
        </p>
      </div>
    </div>
  )
}

export default Loading
</file>

<file path="src/pages/Login.jsx">
import React, { useState } from 'react'
import { useAppContext } from '../context/AppContext';
import toast from 'react-hot-toast';

function Login() {
  const [state, setState] = useState("login");
    const [name, setName] = useState("");
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const {axios,setToken} = useAppContext()



    const handleSubmit = async(e) =>{
      e.preventDefault();
      const url = state === "login" ? '/api/user/login' : '/api/user/register'

      try {
        const {data} = await axios.post(url,{name, email, password})

        if(data.success){
            setToken(data.token)
            localStorage.setItem('token', data.token)
        }else{
            toast.error(data.message)
        }
      } catch (error) {
        toast.error(error.message)
      }
    }

  return (
     <form onSubmit={handleSubmit} className="flex flex-col gap-4 m-auto items-start p-8 py-12 w-80 sm:w-[352px] text-gray-500 rounded-lg shadow-xl border border-gray-200 bg-white">
            <p className="text-2xl font-medium m-auto">
                <span className="text-blue-700/80">User</span> {state === "login" ? "Login" : "Sign Up"}
            </p>
            {state === "register" && (
                <div className="w-full">
                    <p>Name</p>
                    <input onChange={(e) => setName(e.target.value)} value={name} placeholder="type here" className="border border-gray-200 rounded w-full p-2 mt-1 outline-blue-700/80" type="text" required />
                </div>
            )}
            <div className="w-full ">
                <p>Email</p>
                <input onChange={(e) => setEmail(e.target.value)} value={email} placeholder="type here" className="border border-gray-200 rounded w-full p-2 mt-1 outline-blue-700/80" type="email" required />
            </div>
            <div className="w-full ">
                <p>Password</p>
                <input onChange={(e) => setPassword(e.target.value)} value={password} placeholder="type here" className="border border-gray-200 rounded w-full p-2 mt-1 outline-blue-700/80" type="password" required />
            </div>
            {state === "register" ? (
                <p>
                    Already have account? <span onClick={() => setState("login")} className="text-blue-700/80 cursor-pointer">click here</span>
                </p>
            ) : (
                <p>
                    Create an account? <span onClick={() => setState("register")} className="text-blue-700/80 cursor-pointer">click here</span>
                </p>
            )}
            <button type='submit' className="bg-blue-700/80 hover:bg-blue-800/80 transition-all text-white w-full py-2 rounded-md cursor-pointer">
                {state === "register" ? "Create Account" : "Login"}
            </button>
        </form>
  )
}

export default Login
</file>

<file path="vercel.json">
{
    "rewrites": [
      {
        "source": "/(.*)",
        "destination": "/"
      }
    ]
  }
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(),tailwindcss(),],
})
</file>

</files>
